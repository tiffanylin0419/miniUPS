// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ups_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ups_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ups_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ups_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ups_2eproto;
class UCommands;
struct UCommandsDefaultTypeInternal;
extern UCommandsDefaultTypeInternal _UCommands_default_instance_;
class UConnect;
struct UConnectDefaultTypeInternal;
extern UConnectDefaultTypeInternal _UConnect_default_instance_;
class UConnected;
struct UConnectedDefaultTypeInternal;
extern UConnectedDefaultTypeInternal _UConnected_default_instance_;
class UDeliveryLocation;
struct UDeliveryLocationDefaultTypeInternal;
extern UDeliveryLocationDefaultTypeInternal _UDeliveryLocation_default_instance_;
class UDeliveryMade;
struct UDeliveryMadeDefaultTypeInternal;
extern UDeliveryMadeDefaultTypeInternal _UDeliveryMade_default_instance_;
class UErr;
struct UErrDefaultTypeInternal;
extern UErrDefaultTypeInternal _UErr_default_instance_;
class UFinished;
struct UFinishedDefaultTypeInternal;
extern UFinishedDefaultTypeInternal _UFinished_default_instance_;
class UGoDeliver;
struct UGoDeliverDefaultTypeInternal;
extern UGoDeliverDefaultTypeInternal _UGoDeliver_default_instance_;
class UGoPickup;
struct UGoPickupDefaultTypeInternal;
extern UGoPickupDefaultTypeInternal _UGoPickup_default_instance_;
class UInitTruck;
struct UInitTruckDefaultTypeInternal;
extern UInitTruckDefaultTypeInternal _UInitTruck_default_instance_;
class UQuery;
struct UQueryDefaultTypeInternal;
extern UQueryDefaultTypeInternal _UQuery_default_instance_;
class UResponses;
struct UResponsesDefaultTypeInternal;
extern UResponsesDefaultTypeInternal _UResponses_default_instance_;
class UTruck;
struct UTruckDefaultTypeInternal;
extern UTruckDefaultTypeInternal _UTruck_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::UCommands* Arena::CreateMaybeMessage<::UCommands>(Arena*);
template<> ::UConnect* Arena::CreateMaybeMessage<::UConnect>(Arena*);
template<> ::UConnected* Arena::CreateMaybeMessage<::UConnected>(Arena*);
template<> ::UDeliveryLocation* Arena::CreateMaybeMessage<::UDeliveryLocation>(Arena*);
template<> ::UDeliveryMade* Arena::CreateMaybeMessage<::UDeliveryMade>(Arena*);
template<> ::UErr* Arena::CreateMaybeMessage<::UErr>(Arena*);
template<> ::UFinished* Arena::CreateMaybeMessage<::UFinished>(Arena*);
template<> ::UGoDeliver* Arena::CreateMaybeMessage<::UGoDeliver>(Arena*);
template<> ::UGoPickup* Arena::CreateMaybeMessage<::UGoPickup>(Arena*);
template<> ::UInitTruck* Arena::CreateMaybeMessage<::UInitTruck>(Arena*);
template<> ::UQuery* Arena::CreateMaybeMessage<::UQuery>(Arena*);
template<> ::UResponses* Arena::CreateMaybeMessage<::UResponses>(Arena*);
template<> ::UTruck* Arena::CreateMaybeMessage<::UTruck>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UInitTruck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UInitTruck) */ {
 public:
  inline UInitTruck() : UInitTruck(nullptr) {}
  ~UInitTruck() override;
  explicit PROTOBUF_CONSTEXPR UInitTruck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UInitTruck(const UInitTruck& from);
  UInitTruck(UInitTruck&& from) noexcept
    : UInitTruck() {
    *this = ::std::move(from);
  }

  inline UInitTruck& operator=(const UInitTruck& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInitTruck& operator=(UInitTruck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UInitTruck& default_instance() {
    return *internal_default_instance();
  }
  static inline const UInitTruck* internal_default_instance() {
    return reinterpret_cast<const UInitTruck*>(
               &_UInitTruck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UInitTruck& a, UInitTruck& b) {
    a.Swap(&b);
  }
  inline void Swap(UInitTruck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInitTruck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UInitTruck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UInitTruck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UInitTruck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UInitTruck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInitTruck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UInitTruck";
  }
  protected:
  explicit UInitTruck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required int32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UInitTruck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t id_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UConnect) */ {
 public:
  inline UConnect() : UConnect(nullptr) {}
  ~UConnect() override;
  explicit PROTOBUF_CONSTEXPR UConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UConnect(const UConnect& from);
  UConnect(UConnect&& from) noexcept
    : UConnect() {
    *this = ::std::move(from);
  }

  inline UConnect& operator=(const UConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline UConnect& operator=(UConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const UConnect* internal_default_instance() {
    return reinterpret_cast<const UConnect*>(
               &_UConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UConnect& a, UConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(UConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UConnect";
  }
  protected:
  explicit UConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrucksFieldNumber = 2,
    kWorldidFieldNumber = 1,
    kIsAmazonFieldNumber = 3,
  };
  // repeated .UInitTruck trucks = 2;
  int trucks_size() const;
  private:
  int _internal_trucks_size() const;
  public:
  void clear_trucks();
  ::UInitTruck* mutable_trucks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UInitTruck >*
      mutable_trucks();
  private:
  const ::UInitTruck& _internal_trucks(int index) const;
  ::UInitTruck* _internal_add_trucks();
  public:
  const ::UInitTruck& trucks(int index) const;
  ::UInitTruck* add_trucks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UInitTruck >&
      trucks() const;

  // optional int64 worldid = 1;
  bool has_worldid() const;
  private:
  bool _internal_has_worldid() const;
  public:
  void clear_worldid();
  int64_t worldid() const;
  void set_worldid(int64_t value);
  private:
  int64_t _internal_worldid() const;
  void _internal_set_worldid(int64_t value);
  public:

  // required bool isAmazon = 3;
  bool has_isamazon() const;
  private:
  bool _internal_has_isamazon() const;
  public:
  void clear_isamazon();
  bool isamazon() const;
  void set_isamazon(bool value);
  private:
  bool _internal_isamazon() const;
  void _internal_set_isamazon(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UInitTruck > trucks_;
  int64_t worldid_;
  bool isamazon_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UConnected final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UConnected) */ {
 public:
  inline UConnected() : UConnected(nullptr) {}
  ~UConnected() override;
  explicit PROTOBUF_CONSTEXPR UConnected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UConnected(const UConnected& from);
  UConnected(UConnected&& from) noexcept
    : UConnected() {
    *this = ::std::move(from);
  }

  inline UConnected& operator=(const UConnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline UConnected& operator=(UConnected&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UConnected& default_instance() {
    return *internal_default_instance();
  }
  static inline const UConnected* internal_default_instance() {
    return reinterpret_cast<const UConnected*>(
               &_UConnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UConnected& a, UConnected& b) {
    a.Swap(&b);
  }
  inline void Swap(UConnected* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UConnected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UConnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UConnected>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UConnected& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UConnected& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UConnected* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UConnected";
  }
  protected:
  explicit UConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kWorldidFieldNumber = 1,
  };
  // required string result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // required int64 worldid = 1;
  bool has_worldid() const;
  private:
  bool _internal_has_worldid() const;
  public:
  void clear_worldid();
  int64_t worldid() const;
  void set_worldid(int64_t value);
  private:
  int64_t _internal_worldid() const;
  void _internal_set_worldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UConnected)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  int64_t worldid_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UGoPickup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UGoPickup) */ {
 public:
  inline UGoPickup() : UGoPickup(nullptr) {}
  ~UGoPickup() override;
  explicit PROTOBUF_CONSTEXPR UGoPickup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGoPickup(const UGoPickup& from);
  UGoPickup(UGoPickup&& from) noexcept
    : UGoPickup() {
    *this = ::std::move(from);
  }

  inline UGoPickup& operator=(const UGoPickup& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGoPickup& operator=(UGoPickup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGoPickup& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGoPickup* internal_default_instance() {
    return reinterpret_cast<const UGoPickup*>(
               &_UGoPickup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UGoPickup& a, UGoPickup& b) {
    a.Swap(&b);
  }
  inline void Swap(UGoPickup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGoPickup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGoPickup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGoPickup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGoPickup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UGoPickup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGoPickup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UGoPickup";
  }
  protected:
  explicit UGoPickup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTruckidFieldNumber = 1,
    kWhidFieldNumber = 2,
    kSeqnumFieldNumber = 3,
  };
  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // required int32 whid = 2;
  bool has_whid() const;
  private:
  bool _internal_has_whid() const;
  public:
  void clear_whid();
  int32_t whid() const;
  void set_whid(int32_t value);
  private:
  int32_t _internal_whid() const;
  void _internal_set_whid(int32_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UGoPickup)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t truckid_;
  int32_t whid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UFinished final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UFinished) */ {
 public:
  inline UFinished() : UFinished(nullptr) {}
  ~UFinished() override;
  explicit PROTOBUF_CONSTEXPR UFinished(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UFinished(const UFinished& from);
  UFinished(UFinished&& from) noexcept
    : UFinished() {
    *this = ::std::move(from);
  }

  inline UFinished& operator=(const UFinished& from) {
    CopyFrom(from);
    return *this;
  }
  inline UFinished& operator=(UFinished&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UFinished& default_instance() {
    return *internal_default_instance();
  }
  static inline const UFinished* internal_default_instance() {
    return reinterpret_cast<const UFinished*>(
               &_UFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UFinished& a, UFinished& b) {
    a.Swap(&b);
  }
  inline void Swap(UFinished* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UFinished* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UFinished* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UFinished>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UFinished& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UFinished& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UFinished* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UFinished";
  }
  protected:
  explicit UFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 4,
    kTruckidFieldNumber = 1,
    kXFieldNumber = 2,
    kSeqnumFieldNumber = 5,
    kYFieldNumber = 3,
  };
  // required string status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // required int32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int64 seqnum = 5;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UFinished)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  int32_t truckid_;
  int32_t x_;
  int64_t seqnum_;
  int32_t y_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UDeliveryMade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UDeliveryMade) */ {
 public:
  inline UDeliveryMade() : UDeliveryMade(nullptr) {}
  ~UDeliveryMade() override;
  explicit PROTOBUF_CONSTEXPR UDeliveryMade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UDeliveryMade(const UDeliveryMade& from);
  UDeliveryMade(UDeliveryMade&& from) noexcept
    : UDeliveryMade() {
    *this = ::std::move(from);
  }

  inline UDeliveryMade& operator=(const UDeliveryMade& from) {
    CopyFrom(from);
    return *this;
  }
  inline UDeliveryMade& operator=(UDeliveryMade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UDeliveryMade& default_instance() {
    return *internal_default_instance();
  }
  static inline const UDeliveryMade* internal_default_instance() {
    return reinterpret_cast<const UDeliveryMade*>(
               &_UDeliveryMade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UDeliveryMade& a, UDeliveryMade& b) {
    a.Swap(&b);
  }
  inline void Swap(UDeliveryMade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UDeliveryMade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UDeliveryMade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UDeliveryMade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UDeliveryMade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UDeliveryMade& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDeliveryMade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UDeliveryMade";
  }
  protected:
  explicit UDeliveryMade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 2,
    kSeqnumFieldNumber = 3,
    kTruckidFieldNumber = 1,
  };
  // required int64 packageid = 2;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UDeliveryMade)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int64_t seqnum_;
  int32_t truckid_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UDeliveryLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UDeliveryLocation) */ {
 public:
  inline UDeliveryLocation() : UDeliveryLocation(nullptr) {}
  ~UDeliveryLocation() override;
  explicit PROTOBUF_CONSTEXPR UDeliveryLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UDeliveryLocation(const UDeliveryLocation& from);
  UDeliveryLocation(UDeliveryLocation&& from) noexcept
    : UDeliveryLocation() {
    *this = ::std::move(from);
  }

  inline UDeliveryLocation& operator=(const UDeliveryLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UDeliveryLocation& operator=(UDeliveryLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UDeliveryLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UDeliveryLocation* internal_default_instance() {
    return reinterpret_cast<const UDeliveryLocation*>(
               &_UDeliveryLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UDeliveryLocation& a, UDeliveryLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(UDeliveryLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UDeliveryLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UDeliveryLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UDeliveryLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UDeliveryLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UDeliveryLocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDeliveryLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UDeliveryLocation";
  }
  protected:
  explicit UDeliveryLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UDeliveryLocation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UGoDeliver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UGoDeliver) */ {
 public:
  inline UGoDeliver() : UGoDeliver(nullptr) {}
  ~UGoDeliver() override;
  explicit PROTOBUF_CONSTEXPR UGoDeliver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGoDeliver(const UGoDeliver& from);
  UGoDeliver(UGoDeliver&& from) noexcept
    : UGoDeliver() {
    *this = ::std::move(from);
  }

  inline UGoDeliver& operator=(const UGoDeliver& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGoDeliver& operator=(UGoDeliver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGoDeliver& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGoDeliver* internal_default_instance() {
    return reinterpret_cast<const UGoDeliver*>(
               &_UGoDeliver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UGoDeliver& a, UGoDeliver& b) {
    a.Swap(&b);
  }
  inline void Swap(UGoDeliver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGoDeliver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGoDeliver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGoDeliver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGoDeliver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UGoDeliver& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGoDeliver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UGoDeliver";
  }
  protected:
  explicit UGoDeliver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 2,
    kSeqnumFieldNumber = 3,
    kTruckidFieldNumber = 1,
  };
  // repeated .UDeliveryLocation packages = 2;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::UDeliveryLocation* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryLocation >*
      mutable_packages();
  private:
  const ::UDeliveryLocation& _internal_packages(int index) const;
  ::UDeliveryLocation* _internal_add_packages();
  public:
  const ::UDeliveryLocation& packages(int index) const;
  ::UDeliveryLocation* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryLocation >&
      packages() const;

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UGoDeliver)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryLocation > packages_;
  int64_t seqnum_;
  int32_t truckid_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UErr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UErr) */ {
 public:
  inline UErr() : UErr(nullptr) {}
  ~UErr() override;
  explicit PROTOBUF_CONSTEXPR UErr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UErr(const UErr& from);
  UErr(UErr&& from) noexcept
    : UErr() {
    *this = ::std::move(from);
  }

  inline UErr& operator=(const UErr& from) {
    CopyFrom(from);
    return *this;
  }
  inline UErr& operator=(UErr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UErr& default_instance() {
    return *internal_default_instance();
  }
  static inline const UErr* internal_default_instance() {
    return reinterpret_cast<const UErr*>(
               &_UErr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UErr& a, UErr& b) {
    a.Swap(&b);
  }
  inline void Swap(UErr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UErr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UErr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UErr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UErr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UErr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UErr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UErr";
  }
  protected:
  explicit UErr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
    kOriginseqnumFieldNumber = 2,
    kSeqnumFieldNumber = 3,
  };
  // required string err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  const std::string& err() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err();
  PROTOBUF_NODISCARD std::string* release_err();
  void set_allocated_err(std::string* err);
  private:
  const std::string& _internal_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // required int64 originseqnum = 2;
  bool has_originseqnum() const;
  private:
  bool _internal_has_originseqnum() const;
  public:
  void clear_originseqnum();
  int64_t originseqnum() const;
  void set_originseqnum(int64_t value);
  private:
  int64_t _internal_originseqnum() const;
  void _internal_set_originseqnum(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UErr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
  int64_t originseqnum_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UQuery) */ {
 public:
  inline UQuery() : UQuery(nullptr) {}
  ~UQuery() override;
  explicit PROTOBUF_CONSTEXPR UQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UQuery(const UQuery& from);
  UQuery(UQuery&& from) noexcept
    : UQuery() {
    *this = ::std::move(from);
  }

  inline UQuery& operator=(const UQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline UQuery& operator=(UQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const UQuery* internal_default_instance() {
    return reinterpret_cast<const UQuery*>(
               &_UQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UQuery& a, UQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(UQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UQuery";
  }
  protected:
  explicit UQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqnumFieldNumber = 2,
    kTruckidFieldNumber = 1,
  };
  // required int64 seqnum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UQuery)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t seqnum_;
  int32_t truckid_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UTruck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UTruck) */ {
 public:
  inline UTruck() : UTruck(nullptr) {}
  ~UTruck() override;
  explicit PROTOBUF_CONSTEXPR UTruck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UTruck(const UTruck& from);
  UTruck(UTruck&& from) noexcept
    : UTruck() {
    *this = ::std::move(from);
  }

  inline UTruck& operator=(const UTruck& from) {
    CopyFrom(from);
    return *this;
  }
  inline UTruck& operator=(UTruck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UTruck& default_instance() {
    return *internal_default_instance();
  }
  static inline const UTruck* internal_default_instance() {
    return reinterpret_cast<const UTruck*>(
               &_UTruck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UTruck& a, UTruck& b) {
    a.Swap(&b);
  }
  inline void Swap(UTruck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UTruck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UTruck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UTruck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UTruck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UTruck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UTruck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UTruck";
  }
  protected:
  explicit UTruck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kTruckidFieldNumber = 1,
    kXFieldNumber = 3,
    kSeqnumFieldNumber = 5,
    kYFieldNumber = 4,
  };
  // required string status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // required int32 x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int64 seqnum = 5;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UTruck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  int32_t truckid_;
  int32_t x_;
  int64_t seqnum_;
  int32_t y_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UCommands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UCommands) */ {
 public:
  inline UCommands() : UCommands(nullptr) {}
  ~UCommands() override;
  explicit PROTOBUF_CONSTEXPR UCommands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UCommands(const UCommands& from);
  UCommands(UCommands&& from) noexcept
    : UCommands() {
    *this = ::std::move(from);
  }

  inline UCommands& operator=(const UCommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline UCommands& operator=(UCommands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UCommands& default_instance() {
    return *internal_default_instance();
  }
  static inline const UCommands* internal_default_instance() {
    return reinterpret_cast<const UCommands*>(
               &_UCommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UCommands& a, UCommands& b) {
    a.Swap(&b);
  }
  inline void Swap(UCommands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UCommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UCommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UCommands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UCommands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UCommands& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UCommands* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UCommands";
  }
  protected:
  explicit UCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPickupsFieldNumber = 1,
    kDeliveriesFieldNumber = 2,
    kQueriesFieldNumber = 5,
    kAcksFieldNumber = 6,
    kSimspeedFieldNumber = 3,
    kDisconnectFieldNumber = 4,
  };
  // repeated .UGoPickup pickups = 1;
  int pickups_size() const;
  private:
  int _internal_pickups_size() const;
  public:
  void clear_pickups();
  ::UGoPickup* mutable_pickups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoPickup >*
      mutable_pickups();
  private:
  const ::UGoPickup& _internal_pickups(int index) const;
  ::UGoPickup* _internal_add_pickups();
  public:
  const ::UGoPickup& pickups(int index) const;
  ::UGoPickup* add_pickups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoPickup >&
      pickups() const;

  // repeated .UGoDeliver deliveries = 2;
  int deliveries_size() const;
  private:
  int _internal_deliveries_size() const;
  public:
  void clear_deliveries();
  ::UGoDeliver* mutable_deliveries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoDeliver >*
      mutable_deliveries();
  private:
  const ::UGoDeliver& _internal_deliveries(int index) const;
  ::UGoDeliver* _internal_add_deliveries();
  public:
  const ::UGoDeliver& deliveries(int index) const;
  ::UGoDeliver* add_deliveries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoDeliver >&
      deliveries() const;

  // repeated .UQuery queries = 5;
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  ::UQuery* mutable_queries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UQuery >*
      mutable_queries();
  private:
  const ::UQuery& _internal_queries(int index) const;
  ::UQuery* _internal_add_queries();
  public:
  const ::UQuery& queries(int index) const;
  ::UQuery* add_queries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UQuery >&
      queries() const;

  // repeated int64 acks = 6;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // optional uint32 simspeed = 3;
  bool has_simspeed() const;
  private:
  bool _internal_has_simspeed() const;
  public:
  void clear_simspeed();
  uint32_t simspeed() const;
  void set_simspeed(uint32_t value);
  private:
  uint32_t _internal_simspeed() const;
  void _internal_set_simspeed(uint32_t value);
  public:

  // optional bool disconnect = 4;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  bool disconnect() const;
  void set_disconnect(bool value);
  private:
  bool _internal_disconnect() const;
  void _internal_set_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UCommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoPickup > pickups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoDeliver > deliveries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UQuery > queries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  uint32_t simspeed_;
  bool disconnect_;
  friend struct ::TableStruct_ups_2eproto;
};
// -------------------------------------------------------------------

class UResponses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UResponses) */ {
 public:
  inline UResponses() : UResponses(nullptr) {}
  ~UResponses() override;
  explicit PROTOBUF_CONSTEXPR UResponses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UResponses(const UResponses& from);
  UResponses(UResponses&& from) noexcept
    : UResponses() {
    *this = ::std::move(from);
  }

  inline UResponses& operator=(const UResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline UResponses& operator=(UResponses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UResponses& default_instance() {
    return *internal_default_instance();
  }
  static inline const UResponses* internal_default_instance() {
    return reinterpret_cast<const UResponses*>(
               &_UResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UResponses& a, UResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(UResponses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UResponses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UResponses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UResponses& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UResponses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UResponses";
  }
  protected:
  explicit UResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletionsFieldNumber = 1,
    kDeliveredFieldNumber = 2,
    kAcksFieldNumber = 4,
    kTruckstatusFieldNumber = 5,
    kErrorFieldNumber = 6,
    kFinishedFieldNumber = 3,
  };
  // repeated .UFinished completions = 1;
  int completions_size() const;
  private:
  int _internal_completions_size() const;
  public:
  void clear_completions();
  ::UFinished* mutable_completions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UFinished >*
      mutable_completions();
  private:
  const ::UFinished& _internal_completions(int index) const;
  ::UFinished* _internal_add_completions();
  public:
  const ::UFinished& completions(int index) const;
  ::UFinished* add_completions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UFinished >&
      completions() const;

  // repeated .UDeliveryMade delivered = 2;
  int delivered_size() const;
  private:
  int _internal_delivered_size() const;
  public:
  void clear_delivered();
  ::UDeliveryMade* mutable_delivered(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryMade >*
      mutable_delivered();
  private:
  const ::UDeliveryMade& _internal_delivered(int index) const;
  ::UDeliveryMade* _internal_add_delivered();
  public:
  const ::UDeliveryMade& delivered(int index) const;
  ::UDeliveryMade* add_delivered();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryMade >&
      delivered() const;

  // repeated int64 acks = 4;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // repeated .UTruck truckstatus = 5;
  int truckstatus_size() const;
  private:
  int _internal_truckstatus_size() const;
  public:
  void clear_truckstatus();
  ::UTruck* mutable_truckstatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruck >*
      mutable_truckstatus();
  private:
  const ::UTruck& _internal_truckstatus(int index) const;
  ::UTruck* _internal_add_truckstatus();
  public:
  const ::UTruck& truckstatus(int index) const;
  ::UTruck* add_truckstatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruck >&
      truckstatus() const;

  // repeated .UErr error = 6;
  int error_size() const;
  private:
  int _internal_error_size() const;
  public:
  void clear_error();
  ::UErr* mutable_error(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UErr >*
      mutable_error();
  private:
  const ::UErr& _internal_error(int index) const;
  ::UErr* _internal_add_error();
  public:
  const ::UErr& error(int index) const;
  ::UErr* add_error();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UErr >&
      error() const;

  // optional bool finished = 3;
  bool has_finished() const;
  private:
  bool _internal_has_finished() const;
  public:
  void clear_finished();
  bool finished() const;
  void set_finished(bool value);
  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UFinished > completions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryMade > delivered_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruck > truckstatus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UErr > error_;
  bool finished_;
  friend struct ::TableStruct_ups_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UInitTruck

// required int32 id = 1;
inline bool UInitTruck::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UInitTruck::has_id() const {
  return _internal_has_id();
}
inline void UInitTruck::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t UInitTruck::_internal_id() const {
  return id_;
}
inline int32_t UInitTruck::id() const {
  // @@protoc_insertion_point(field_get:UInitTruck.id)
  return _internal_id();
}
inline void UInitTruck::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void UInitTruck::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UInitTruck.id)
}

// required int32 x = 2;
inline bool UInitTruck::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UInitTruck::has_x() const {
  return _internal_has_x();
}
inline void UInitTruck::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UInitTruck::_internal_x() const {
  return x_;
}
inline int32_t UInitTruck::x() const {
  // @@protoc_insertion_point(field_get:UInitTruck.x)
  return _internal_x();
}
inline void UInitTruck::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void UInitTruck::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:UInitTruck.x)
}

// required int32 y = 3;
inline bool UInitTruck::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UInitTruck::has_y() const {
  return _internal_has_y();
}
inline void UInitTruck::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UInitTruck::_internal_y() const {
  return y_;
}
inline int32_t UInitTruck::y() const {
  // @@protoc_insertion_point(field_get:UInitTruck.y)
  return _internal_y();
}
inline void UInitTruck::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void UInitTruck::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:UInitTruck.y)
}

// -------------------------------------------------------------------

// UConnect

// optional int64 worldid = 1;
inline bool UConnect::_internal_has_worldid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UConnect::has_worldid() const {
  return _internal_has_worldid();
}
inline void UConnect::clear_worldid() {
  worldid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UConnect::_internal_worldid() const {
  return worldid_;
}
inline int64_t UConnect::worldid() const {
  // @@protoc_insertion_point(field_get:UConnect.worldid)
  return _internal_worldid();
}
inline void UConnect::_internal_set_worldid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  worldid_ = value;
}
inline void UConnect::set_worldid(int64_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:UConnect.worldid)
}

// repeated .UInitTruck trucks = 2;
inline int UConnect::_internal_trucks_size() const {
  return trucks_.size();
}
inline int UConnect::trucks_size() const {
  return _internal_trucks_size();
}
inline void UConnect::clear_trucks() {
  trucks_.Clear();
}
inline ::UInitTruck* UConnect::mutable_trucks(int index) {
  // @@protoc_insertion_point(field_mutable:UConnect.trucks)
  return trucks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UInitTruck >*
UConnect::mutable_trucks() {
  // @@protoc_insertion_point(field_mutable_list:UConnect.trucks)
  return &trucks_;
}
inline const ::UInitTruck& UConnect::_internal_trucks(int index) const {
  return trucks_.Get(index);
}
inline const ::UInitTruck& UConnect::trucks(int index) const {
  // @@protoc_insertion_point(field_get:UConnect.trucks)
  return _internal_trucks(index);
}
inline ::UInitTruck* UConnect::_internal_add_trucks() {
  return trucks_.Add();
}
inline ::UInitTruck* UConnect::add_trucks() {
  ::UInitTruck* _add = _internal_add_trucks();
  // @@protoc_insertion_point(field_add:UConnect.trucks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UInitTruck >&
UConnect::trucks() const {
  // @@protoc_insertion_point(field_list:UConnect.trucks)
  return trucks_;
}

// required bool isAmazon = 3;
inline bool UConnect::_internal_has_isamazon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UConnect::has_isamazon() const {
  return _internal_has_isamazon();
}
inline void UConnect::clear_isamazon() {
  isamazon_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UConnect::_internal_isamazon() const {
  return isamazon_;
}
inline bool UConnect::isamazon() const {
  // @@protoc_insertion_point(field_get:UConnect.isAmazon)
  return _internal_isamazon();
}
inline void UConnect::_internal_set_isamazon(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isamazon_ = value;
}
inline void UConnect::set_isamazon(bool value) {
  _internal_set_isamazon(value);
  // @@protoc_insertion_point(field_set:UConnect.isAmazon)
}

// -------------------------------------------------------------------

// UConnected

// required int64 worldid = 1;
inline bool UConnected::_internal_has_worldid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UConnected::has_worldid() const {
  return _internal_has_worldid();
}
inline void UConnected::clear_worldid() {
  worldid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UConnected::_internal_worldid() const {
  return worldid_;
}
inline int64_t UConnected::worldid() const {
  // @@protoc_insertion_point(field_get:UConnected.worldid)
  return _internal_worldid();
}
inline void UConnected::_internal_set_worldid(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  worldid_ = value;
}
inline void UConnected::set_worldid(int64_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:UConnected.worldid)
}

// required string result = 2;
inline bool UConnected::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UConnected::has_result() const {
  return _internal_has_result();
}
inline void UConnected::clear_result() {
  result_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UConnected::result() const {
  // @@protoc_insertion_point(field_get:UConnected.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UConnected::set_result(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UConnected.result)
}
inline std::string* UConnected::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:UConnected.result)
  return _s;
}
inline const std::string& UConnected::_internal_result() const {
  return result_.Get();
}
inline void UConnected::_internal_set_result(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  result_.Set(value, GetArenaForAllocation());
}
inline std::string* UConnected::_internal_mutable_result() {
  _has_bits_[0] |= 0x00000001u;
  return result_.Mutable(GetArenaForAllocation());
}
inline std::string* UConnected::release_result() {
  // @@protoc_insertion_point(field_release:UConnected.result)
  if (!_internal_has_result()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = result_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault()) {
    result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UConnected::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault()) {
    result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UConnected.result)
}

// -------------------------------------------------------------------

// UGoPickup

// required int32 truckid = 1;
inline bool UGoPickup::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UGoPickup::has_truckid() const {
  return _internal_has_truckid();
}
inline void UGoPickup::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t UGoPickup::_internal_truckid() const {
  return truckid_;
}
inline int32_t UGoPickup::truckid() const {
  // @@protoc_insertion_point(field_get:UGoPickup.truckid)
  return _internal_truckid();
}
inline void UGoPickup::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  truckid_ = value;
}
inline void UGoPickup::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UGoPickup.truckid)
}

// required int32 whid = 2;
inline bool UGoPickup::_internal_has_whid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UGoPickup::has_whid() const {
  return _internal_has_whid();
}
inline void UGoPickup::clear_whid() {
  whid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UGoPickup::_internal_whid() const {
  return whid_;
}
inline int32_t UGoPickup::whid() const {
  // @@protoc_insertion_point(field_get:UGoPickup.whid)
  return _internal_whid();
}
inline void UGoPickup::_internal_set_whid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  whid_ = value;
}
inline void UGoPickup::set_whid(int32_t value) {
  _internal_set_whid(value);
  // @@protoc_insertion_point(field_set:UGoPickup.whid)
}

// required int64 seqnum = 3;
inline bool UGoPickup::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UGoPickup::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UGoPickup::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t UGoPickup::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UGoPickup::seqnum() const {
  // @@protoc_insertion_point(field_get:UGoPickup.seqnum)
  return _internal_seqnum();
}
inline void UGoPickup::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void UGoPickup::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UGoPickup.seqnum)
}

// -------------------------------------------------------------------

// UFinished

// required int32 truckid = 1;
inline bool UFinished::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UFinished::has_truckid() const {
  return _internal_has_truckid();
}
inline void UFinished::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UFinished::_internal_truckid() const {
  return truckid_;
}
inline int32_t UFinished::truckid() const {
  // @@protoc_insertion_point(field_get:UFinished.truckid)
  return _internal_truckid();
}
inline void UFinished::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  truckid_ = value;
}
inline void UFinished::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UFinished.truckid)
}

// required int32 x = 2;
inline bool UFinished::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UFinished::has_x() const {
  return _internal_has_x();
}
inline void UFinished::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UFinished::_internal_x() const {
  return x_;
}
inline int32_t UFinished::x() const {
  // @@protoc_insertion_point(field_get:UFinished.x)
  return _internal_x();
}
inline void UFinished::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void UFinished::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:UFinished.x)
}

// required int32 y = 3;
inline bool UFinished::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UFinished::has_y() const {
  return _internal_has_y();
}
inline void UFinished::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t UFinished::_internal_y() const {
  return y_;
}
inline int32_t UFinished::y() const {
  // @@protoc_insertion_point(field_get:UFinished.y)
  return _internal_y();
}
inline void UFinished::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void UFinished::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:UFinished.y)
}

// required string status = 4;
inline bool UFinished::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UFinished::has_status() const {
  return _internal_has_status();
}
inline void UFinished::clear_status() {
  status_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UFinished::status() const {
  // @@protoc_insertion_point(field_get:UFinished.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UFinished::set_status(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UFinished.status)
}
inline std::string* UFinished::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:UFinished.status)
  return _s;
}
inline const std::string& UFinished::_internal_status() const {
  return status_.Get();
}
inline void UFinished::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* UFinished::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* UFinished::release_status() {
  // @@protoc_insertion_point(field_release:UFinished.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = status_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UFinished::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UFinished.status)
}

// required int64 seqnum = 5;
inline bool UFinished::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UFinished::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UFinished::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t UFinished::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UFinished::seqnum() const {
  // @@protoc_insertion_point(field_get:UFinished.seqnum)
  return _internal_seqnum();
}
inline void UFinished::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  seqnum_ = value;
}
inline void UFinished::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UFinished.seqnum)
}

// -------------------------------------------------------------------

// UDeliveryMade

// required int32 truckid = 1;
inline bool UDeliveryMade::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UDeliveryMade::has_truckid() const {
  return _internal_has_truckid();
}
inline void UDeliveryMade::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UDeliveryMade::_internal_truckid() const {
  return truckid_;
}
inline int32_t UDeliveryMade::truckid() const {
  // @@protoc_insertion_point(field_get:UDeliveryMade.truckid)
  return _internal_truckid();
}
inline void UDeliveryMade::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  truckid_ = value;
}
inline void UDeliveryMade::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UDeliveryMade.truckid)
}

// required int64 packageid = 2;
inline bool UDeliveryMade::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UDeliveryMade::has_packageid() const {
  return _internal_has_packageid();
}
inline void UDeliveryMade::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UDeliveryMade::_internal_packageid() const {
  return packageid_;
}
inline int64_t UDeliveryMade::packageid() const {
  // @@protoc_insertion_point(field_get:UDeliveryMade.packageid)
  return _internal_packageid();
}
inline void UDeliveryMade::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UDeliveryMade::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UDeliveryMade.packageid)
}

// required int64 seqnum = 3;
inline bool UDeliveryMade::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UDeliveryMade::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UDeliveryMade::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UDeliveryMade::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UDeliveryMade::seqnum() const {
  // @@protoc_insertion_point(field_get:UDeliveryMade.seqnum)
  return _internal_seqnum();
}
inline void UDeliveryMade::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void UDeliveryMade::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UDeliveryMade.seqnum)
}

// -------------------------------------------------------------------

// UDeliveryLocation

// required int64 packageid = 1;
inline bool UDeliveryLocation::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UDeliveryLocation::has_packageid() const {
  return _internal_has_packageid();
}
inline void UDeliveryLocation::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UDeliveryLocation::_internal_packageid() const {
  return packageid_;
}
inline int64_t UDeliveryLocation::packageid() const {
  // @@protoc_insertion_point(field_get:UDeliveryLocation.packageid)
  return _internal_packageid();
}
inline void UDeliveryLocation::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UDeliveryLocation::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UDeliveryLocation.packageid)
}

// required int32 x = 2;
inline bool UDeliveryLocation::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UDeliveryLocation::has_x() const {
  return _internal_has_x();
}
inline void UDeliveryLocation::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UDeliveryLocation::_internal_x() const {
  return x_;
}
inline int32_t UDeliveryLocation::x() const {
  // @@protoc_insertion_point(field_get:UDeliveryLocation.x)
  return _internal_x();
}
inline void UDeliveryLocation::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void UDeliveryLocation::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:UDeliveryLocation.x)
}

// required int32 y = 3;
inline bool UDeliveryLocation::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UDeliveryLocation::has_y() const {
  return _internal_has_y();
}
inline void UDeliveryLocation::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UDeliveryLocation::_internal_y() const {
  return y_;
}
inline int32_t UDeliveryLocation::y() const {
  // @@protoc_insertion_point(field_get:UDeliveryLocation.y)
  return _internal_y();
}
inline void UDeliveryLocation::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void UDeliveryLocation::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:UDeliveryLocation.y)
}

// -------------------------------------------------------------------

// UGoDeliver

// required int32 truckid = 1;
inline bool UGoDeliver::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UGoDeliver::has_truckid() const {
  return _internal_has_truckid();
}
inline void UGoDeliver::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UGoDeliver::_internal_truckid() const {
  return truckid_;
}
inline int32_t UGoDeliver::truckid() const {
  // @@protoc_insertion_point(field_get:UGoDeliver.truckid)
  return _internal_truckid();
}
inline void UGoDeliver::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  truckid_ = value;
}
inline void UGoDeliver::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UGoDeliver.truckid)
}

// repeated .UDeliveryLocation packages = 2;
inline int UGoDeliver::_internal_packages_size() const {
  return packages_.size();
}
inline int UGoDeliver::packages_size() const {
  return _internal_packages_size();
}
inline void UGoDeliver::clear_packages() {
  packages_.Clear();
}
inline ::UDeliveryLocation* UGoDeliver::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:UGoDeliver.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryLocation >*
UGoDeliver::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:UGoDeliver.packages)
  return &packages_;
}
inline const ::UDeliveryLocation& UGoDeliver::_internal_packages(int index) const {
  return packages_.Get(index);
}
inline const ::UDeliveryLocation& UGoDeliver::packages(int index) const {
  // @@protoc_insertion_point(field_get:UGoDeliver.packages)
  return _internal_packages(index);
}
inline ::UDeliveryLocation* UGoDeliver::_internal_add_packages() {
  return packages_.Add();
}
inline ::UDeliveryLocation* UGoDeliver::add_packages() {
  ::UDeliveryLocation* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:UGoDeliver.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryLocation >&
UGoDeliver::packages() const {
  // @@protoc_insertion_point(field_list:UGoDeliver.packages)
  return packages_;
}

// required int64 seqnum = 3;
inline bool UGoDeliver::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UGoDeliver::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UGoDeliver::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UGoDeliver::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UGoDeliver::seqnum() const {
  // @@protoc_insertion_point(field_get:UGoDeliver.seqnum)
  return _internal_seqnum();
}
inline void UGoDeliver::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  seqnum_ = value;
}
inline void UGoDeliver::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UGoDeliver.seqnum)
}

// -------------------------------------------------------------------

// UErr

// required string err = 1;
inline bool UErr::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UErr::has_err() const {
  return _internal_has_err();
}
inline void UErr::clear_err() {
  err_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UErr::err() const {
  // @@protoc_insertion_point(field_get:UErr.err)
  return _internal_err();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UErr::set_err(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 err_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UErr.err)
}
inline std::string* UErr::mutable_err() {
  std::string* _s = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:UErr.err)
  return _s;
}
inline const std::string& UErr::_internal_err() const {
  return err_.Get();
}
inline void UErr::_internal_set_err(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  err_.Set(value, GetArenaForAllocation());
}
inline std::string* UErr::_internal_mutable_err() {
  _has_bits_[0] |= 0x00000001u;
  return err_.Mutable(GetArenaForAllocation());
}
inline std::string* UErr::release_err() {
  // @@protoc_insertion_point(field_release:UErr.err)
  if (!_internal_has_err()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = err_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_.IsDefault()) {
    err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UErr::set_allocated_err(std::string* err) {
  if (err != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  err_.SetAllocated(err, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_.IsDefault()) {
    err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UErr.err)
}

// required int64 originseqnum = 2;
inline bool UErr::_internal_has_originseqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UErr::has_originseqnum() const {
  return _internal_has_originseqnum();
}
inline void UErr::clear_originseqnum() {
  originseqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UErr::_internal_originseqnum() const {
  return originseqnum_;
}
inline int64_t UErr::originseqnum() const {
  // @@protoc_insertion_point(field_get:UErr.originseqnum)
  return _internal_originseqnum();
}
inline void UErr::_internal_set_originseqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  originseqnum_ = value;
}
inline void UErr::set_originseqnum(int64_t value) {
  _internal_set_originseqnum(value);
  // @@protoc_insertion_point(field_set:UErr.originseqnum)
}

// required int64 seqnum = 3;
inline bool UErr::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UErr::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UErr::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t UErr::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UErr::seqnum() const {
  // @@protoc_insertion_point(field_get:UErr.seqnum)
  return _internal_seqnum();
}
inline void UErr::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void UErr::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UErr.seqnum)
}

// -------------------------------------------------------------------

// UQuery

// required int32 truckid = 1;
inline bool UQuery::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UQuery::has_truckid() const {
  return _internal_has_truckid();
}
inline void UQuery::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UQuery::_internal_truckid() const {
  return truckid_;
}
inline int32_t UQuery::truckid() const {
  // @@protoc_insertion_point(field_get:UQuery.truckid)
  return _internal_truckid();
}
inline void UQuery::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  truckid_ = value;
}
inline void UQuery::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UQuery.truckid)
}

// required int64 seqnum = 2;
inline bool UQuery::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UQuery::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UQuery::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UQuery::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UQuery::seqnum() const {
  // @@protoc_insertion_point(field_get:UQuery.seqnum)
  return _internal_seqnum();
}
inline void UQuery::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  seqnum_ = value;
}
inline void UQuery::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UQuery.seqnum)
}

// -------------------------------------------------------------------

// UTruck

// required int32 truckid = 1;
inline bool UTruck::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UTruck::has_truckid() const {
  return _internal_has_truckid();
}
inline void UTruck::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UTruck::_internal_truckid() const {
  return truckid_;
}
inline int32_t UTruck::truckid() const {
  // @@protoc_insertion_point(field_get:UTruck.truckid)
  return _internal_truckid();
}
inline void UTruck::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  truckid_ = value;
}
inline void UTruck::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UTruck.truckid)
}

// required string status = 2;
inline bool UTruck::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UTruck::has_status() const {
  return _internal_has_status();
}
inline void UTruck::clear_status() {
  status_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UTruck::status() const {
  // @@protoc_insertion_point(field_get:UTruck.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UTruck::set_status(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UTruck.status)
}
inline std::string* UTruck::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:UTruck.status)
  return _s;
}
inline const std::string& UTruck::_internal_status() const {
  return status_.Get();
}
inline void UTruck::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* UTruck::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* UTruck::release_status() {
  // @@protoc_insertion_point(field_release:UTruck.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = status_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UTruck::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UTruck.status)
}

// required int32 x = 3;
inline bool UTruck::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UTruck::has_x() const {
  return _internal_has_x();
}
inline void UTruck::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UTruck::_internal_x() const {
  return x_;
}
inline int32_t UTruck::x() const {
  // @@protoc_insertion_point(field_get:UTruck.x)
  return _internal_x();
}
inline void UTruck::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void UTruck::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:UTruck.x)
}

// required int32 y = 4;
inline bool UTruck::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UTruck::has_y() const {
  return _internal_has_y();
}
inline void UTruck::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t UTruck::_internal_y() const {
  return y_;
}
inline int32_t UTruck::y() const {
  // @@protoc_insertion_point(field_get:UTruck.y)
  return _internal_y();
}
inline void UTruck::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void UTruck::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:UTruck.y)
}

// required int64 seqnum = 5;
inline bool UTruck::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UTruck::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UTruck::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t UTruck::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UTruck::seqnum() const {
  // @@protoc_insertion_point(field_get:UTruck.seqnum)
  return _internal_seqnum();
}
inline void UTruck::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  seqnum_ = value;
}
inline void UTruck::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UTruck.seqnum)
}

// -------------------------------------------------------------------

// UCommands

// repeated .UGoPickup pickups = 1;
inline int UCommands::_internal_pickups_size() const {
  return pickups_.size();
}
inline int UCommands::pickups_size() const {
  return _internal_pickups_size();
}
inline void UCommands::clear_pickups() {
  pickups_.Clear();
}
inline ::UGoPickup* UCommands::mutable_pickups(int index) {
  // @@protoc_insertion_point(field_mutable:UCommands.pickups)
  return pickups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoPickup >*
UCommands::mutable_pickups() {
  // @@protoc_insertion_point(field_mutable_list:UCommands.pickups)
  return &pickups_;
}
inline const ::UGoPickup& UCommands::_internal_pickups(int index) const {
  return pickups_.Get(index);
}
inline const ::UGoPickup& UCommands::pickups(int index) const {
  // @@protoc_insertion_point(field_get:UCommands.pickups)
  return _internal_pickups(index);
}
inline ::UGoPickup* UCommands::_internal_add_pickups() {
  return pickups_.Add();
}
inline ::UGoPickup* UCommands::add_pickups() {
  ::UGoPickup* _add = _internal_add_pickups();
  // @@protoc_insertion_point(field_add:UCommands.pickups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoPickup >&
UCommands::pickups() const {
  // @@protoc_insertion_point(field_list:UCommands.pickups)
  return pickups_;
}

// repeated .UGoDeliver deliveries = 2;
inline int UCommands::_internal_deliveries_size() const {
  return deliveries_.size();
}
inline int UCommands::deliveries_size() const {
  return _internal_deliveries_size();
}
inline void UCommands::clear_deliveries() {
  deliveries_.Clear();
}
inline ::UGoDeliver* UCommands::mutable_deliveries(int index) {
  // @@protoc_insertion_point(field_mutable:UCommands.deliveries)
  return deliveries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoDeliver >*
UCommands::mutable_deliveries() {
  // @@protoc_insertion_point(field_mutable_list:UCommands.deliveries)
  return &deliveries_;
}
inline const ::UGoDeliver& UCommands::_internal_deliveries(int index) const {
  return deliveries_.Get(index);
}
inline const ::UGoDeliver& UCommands::deliveries(int index) const {
  // @@protoc_insertion_point(field_get:UCommands.deliveries)
  return _internal_deliveries(index);
}
inline ::UGoDeliver* UCommands::_internal_add_deliveries() {
  return deliveries_.Add();
}
inline ::UGoDeliver* UCommands::add_deliveries() {
  ::UGoDeliver* _add = _internal_add_deliveries();
  // @@protoc_insertion_point(field_add:UCommands.deliveries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UGoDeliver >&
UCommands::deliveries() const {
  // @@protoc_insertion_point(field_list:UCommands.deliveries)
  return deliveries_;
}

// optional uint32 simspeed = 3;
inline bool UCommands::_internal_has_simspeed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UCommands::has_simspeed() const {
  return _internal_has_simspeed();
}
inline void UCommands::clear_simspeed() {
  simspeed_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t UCommands::_internal_simspeed() const {
  return simspeed_;
}
inline uint32_t UCommands::simspeed() const {
  // @@protoc_insertion_point(field_get:UCommands.simspeed)
  return _internal_simspeed();
}
inline void UCommands::_internal_set_simspeed(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  simspeed_ = value;
}
inline void UCommands::set_simspeed(uint32_t value) {
  _internal_set_simspeed(value);
  // @@protoc_insertion_point(field_set:UCommands.simspeed)
}

// optional bool disconnect = 4;
inline bool UCommands::_internal_has_disconnect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UCommands::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void UCommands::clear_disconnect() {
  disconnect_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UCommands::_internal_disconnect() const {
  return disconnect_;
}
inline bool UCommands::disconnect() const {
  // @@protoc_insertion_point(field_get:UCommands.disconnect)
  return _internal_disconnect();
}
inline void UCommands::_internal_set_disconnect(bool value) {
  _has_bits_[0] |= 0x00000002u;
  disconnect_ = value;
}
inline void UCommands::set_disconnect(bool value) {
  _internal_set_disconnect(value);
  // @@protoc_insertion_point(field_set:UCommands.disconnect)
}

// repeated .UQuery queries = 5;
inline int UCommands::_internal_queries_size() const {
  return queries_.size();
}
inline int UCommands::queries_size() const {
  return _internal_queries_size();
}
inline void UCommands::clear_queries() {
  queries_.Clear();
}
inline ::UQuery* UCommands::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:UCommands.queries)
  return queries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UQuery >*
UCommands::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:UCommands.queries)
  return &queries_;
}
inline const ::UQuery& UCommands::_internal_queries(int index) const {
  return queries_.Get(index);
}
inline const ::UQuery& UCommands::queries(int index) const {
  // @@protoc_insertion_point(field_get:UCommands.queries)
  return _internal_queries(index);
}
inline ::UQuery* UCommands::_internal_add_queries() {
  return queries_.Add();
}
inline ::UQuery* UCommands::add_queries() {
  ::UQuery* _add = _internal_add_queries();
  // @@protoc_insertion_point(field_add:UCommands.queries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UQuery >&
UCommands::queries() const {
  // @@protoc_insertion_point(field_list:UCommands.queries)
  return queries_;
}

// repeated int64 acks = 6;
inline int UCommands::_internal_acks_size() const {
  return acks_.size();
}
inline int UCommands::acks_size() const {
  return _internal_acks_size();
}
inline void UCommands::clear_acks() {
  acks_.Clear();
}
inline int64_t UCommands::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t UCommands::acks(int index) const {
  // @@protoc_insertion_point(field_get:UCommands.acks)
  return _internal_acks(index);
}
inline void UCommands::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:UCommands.acks)
}
inline void UCommands::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void UCommands::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:UCommands.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UCommands::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UCommands::acks() const {
  // @@protoc_insertion_point(field_list:UCommands.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UCommands::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UCommands::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:UCommands.acks)
  return _internal_mutable_acks();
}

// -------------------------------------------------------------------

// UResponses

// repeated .UFinished completions = 1;
inline int UResponses::_internal_completions_size() const {
  return completions_.size();
}
inline int UResponses::completions_size() const {
  return _internal_completions_size();
}
inline void UResponses::clear_completions() {
  completions_.Clear();
}
inline ::UFinished* UResponses::mutable_completions(int index) {
  // @@protoc_insertion_point(field_mutable:UResponses.completions)
  return completions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UFinished >*
UResponses::mutable_completions() {
  // @@protoc_insertion_point(field_mutable_list:UResponses.completions)
  return &completions_;
}
inline const ::UFinished& UResponses::_internal_completions(int index) const {
  return completions_.Get(index);
}
inline const ::UFinished& UResponses::completions(int index) const {
  // @@protoc_insertion_point(field_get:UResponses.completions)
  return _internal_completions(index);
}
inline ::UFinished* UResponses::_internal_add_completions() {
  return completions_.Add();
}
inline ::UFinished* UResponses::add_completions() {
  ::UFinished* _add = _internal_add_completions();
  // @@protoc_insertion_point(field_add:UResponses.completions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UFinished >&
UResponses::completions() const {
  // @@protoc_insertion_point(field_list:UResponses.completions)
  return completions_;
}

// repeated .UDeliveryMade delivered = 2;
inline int UResponses::_internal_delivered_size() const {
  return delivered_.size();
}
inline int UResponses::delivered_size() const {
  return _internal_delivered_size();
}
inline void UResponses::clear_delivered() {
  delivered_.Clear();
}
inline ::UDeliveryMade* UResponses::mutable_delivered(int index) {
  // @@protoc_insertion_point(field_mutable:UResponses.delivered)
  return delivered_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryMade >*
UResponses::mutable_delivered() {
  // @@protoc_insertion_point(field_mutable_list:UResponses.delivered)
  return &delivered_;
}
inline const ::UDeliveryMade& UResponses::_internal_delivered(int index) const {
  return delivered_.Get(index);
}
inline const ::UDeliveryMade& UResponses::delivered(int index) const {
  // @@protoc_insertion_point(field_get:UResponses.delivered)
  return _internal_delivered(index);
}
inline ::UDeliveryMade* UResponses::_internal_add_delivered() {
  return delivered_.Add();
}
inline ::UDeliveryMade* UResponses::add_delivered() {
  ::UDeliveryMade* _add = _internal_add_delivered();
  // @@protoc_insertion_point(field_add:UResponses.delivered)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDeliveryMade >&
UResponses::delivered() const {
  // @@protoc_insertion_point(field_list:UResponses.delivered)
  return delivered_;
}

// optional bool finished = 3;
inline bool UResponses::_internal_has_finished() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UResponses::has_finished() const {
  return _internal_has_finished();
}
inline void UResponses::clear_finished() {
  finished_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool UResponses::_internal_finished() const {
  return finished_;
}
inline bool UResponses::finished() const {
  // @@protoc_insertion_point(field_get:UResponses.finished)
  return _internal_finished();
}
inline void UResponses::_internal_set_finished(bool value) {
  _has_bits_[0] |= 0x00000001u;
  finished_ = value;
}
inline void UResponses::set_finished(bool value) {
  _internal_set_finished(value);
  // @@protoc_insertion_point(field_set:UResponses.finished)
}

// repeated int64 acks = 4;
inline int UResponses::_internal_acks_size() const {
  return acks_.size();
}
inline int UResponses::acks_size() const {
  return _internal_acks_size();
}
inline void UResponses::clear_acks() {
  acks_.Clear();
}
inline int64_t UResponses::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t UResponses::acks(int index) const {
  // @@protoc_insertion_point(field_get:UResponses.acks)
  return _internal_acks(index);
}
inline void UResponses::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:UResponses.acks)
}
inline void UResponses::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void UResponses::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:UResponses.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UResponses::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UResponses::acks() const {
  // @@protoc_insertion_point(field_list:UResponses.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UResponses::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UResponses::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:UResponses.acks)
  return _internal_mutable_acks();
}

// repeated .UTruck truckstatus = 5;
inline int UResponses::_internal_truckstatus_size() const {
  return truckstatus_.size();
}
inline int UResponses::truckstatus_size() const {
  return _internal_truckstatus_size();
}
inline void UResponses::clear_truckstatus() {
  truckstatus_.Clear();
}
inline ::UTruck* UResponses::mutable_truckstatus(int index) {
  // @@protoc_insertion_point(field_mutable:UResponses.truckstatus)
  return truckstatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruck >*
UResponses::mutable_truckstatus() {
  // @@protoc_insertion_point(field_mutable_list:UResponses.truckstatus)
  return &truckstatus_;
}
inline const ::UTruck& UResponses::_internal_truckstatus(int index) const {
  return truckstatus_.Get(index);
}
inline const ::UTruck& UResponses::truckstatus(int index) const {
  // @@protoc_insertion_point(field_get:UResponses.truckstatus)
  return _internal_truckstatus(index);
}
inline ::UTruck* UResponses::_internal_add_truckstatus() {
  return truckstatus_.Add();
}
inline ::UTruck* UResponses::add_truckstatus() {
  ::UTruck* _add = _internal_add_truckstatus();
  // @@protoc_insertion_point(field_add:UResponses.truckstatus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruck >&
UResponses::truckstatus() const {
  // @@protoc_insertion_point(field_list:UResponses.truckstatus)
  return truckstatus_;
}

// repeated .UErr error = 6;
inline int UResponses::_internal_error_size() const {
  return error_.size();
}
inline int UResponses::error_size() const {
  return _internal_error_size();
}
inline void UResponses::clear_error() {
  error_.Clear();
}
inline ::UErr* UResponses::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:UResponses.error)
  return error_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UErr >*
UResponses::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:UResponses.error)
  return &error_;
}
inline const ::UErr& UResponses::_internal_error(int index) const {
  return error_.Get(index);
}
inline const ::UErr& UResponses::error(int index) const {
  // @@protoc_insertion_point(field_get:UResponses.error)
  return _internal_error(index);
}
inline ::UErr* UResponses::_internal_add_error() {
  return error_.Add();
}
inline ::UErr* UResponses::add_error() {
  ::UErr* _add = _internal_add_error();
  // @@protoc_insertion_point(field_add:UResponses.error)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UErr >&
UResponses::error() const {
  // @@protoc_insertion_point(field_list:UResponses.error)
  return error_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ups_2eproto
