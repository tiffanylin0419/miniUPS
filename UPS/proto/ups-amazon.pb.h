// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups-amazon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ups_2damazon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ups_2damazon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ups_2damazon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ups_2damazon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ups_2damazon_2eproto;
class AUCommands;
struct AUCommandsDefaultTypeInternal;
extern AUCommandsDefaultTypeInternal _AUCommands_default_instance_;
class AUInitConnect;
struct AUInitConnectDefaultTypeInternal;
extern AUInitConnectDefaultTypeInternal _AUInitConnect_default_instance_;
class AUInitPickUp;
struct AUInitPickUpDefaultTypeInternal;
extern AUInitPickUpDefaultTypeInternal _AUInitPickUp_default_instance_;
class AULoaded;
struct AULoadedDefaultTypeInternal;
extern AULoadedDefaultTypeInternal _AULoaded_default_instance_;
class AUPackageResponse;
struct AUPackageResponseDefaultTypeInternal;
extern AUPackageResponseDefaultTypeInternal _AUPackageResponse_default_instance_;
class AUProduct;
struct AUProductDefaultTypeInternal;
extern AUProductDefaultTypeInternal _AUProduct_default_instance_;
class UACommands;
struct UACommandsDefaultTypeInternal;
extern UACommandsDefaultTypeInternal _UACommands_default_instance_;
class UAConfirmConnected;
struct UAConfirmConnectedDefaultTypeInternal;
extern UAConfirmConnectedDefaultTypeInternal _UAConfirmConnected_default_instance_;
class UADelivered;
struct UADeliveredDefaultTypeInternal;
extern UADeliveredDefaultTypeInternal _UADelivered_default_instance_;
class UADeliveryLocation;
struct UADeliveryLocationDefaultTypeInternal;
extern UADeliveryLocationDefaultTypeInternal _UADeliveryLocation_default_instance_;
class UAPackageRequest;
struct UAPackageRequestDefaultTypeInternal;
extern UAPackageRequestDefaultTypeInternal _UAPackageRequest_default_instance_;
class UATruck;
struct UATruckDefaultTypeInternal;
extern UATruckDefaultTypeInternal _UATruck_default_instance_;
class UATruckArrived;
struct UATruckArrivedDefaultTypeInternal;
extern UATruckArrivedDefaultTypeInternal _UATruckArrived_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AUCommands* Arena::CreateMaybeMessage<::AUCommands>(Arena*);
template<> ::AUInitConnect* Arena::CreateMaybeMessage<::AUInitConnect>(Arena*);
template<> ::AUInitPickUp* Arena::CreateMaybeMessage<::AUInitPickUp>(Arena*);
template<> ::AULoaded* Arena::CreateMaybeMessage<::AULoaded>(Arena*);
template<> ::AUPackageResponse* Arena::CreateMaybeMessage<::AUPackageResponse>(Arena*);
template<> ::AUProduct* Arena::CreateMaybeMessage<::AUProduct>(Arena*);
template<> ::UACommands* Arena::CreateMaybeMessage<::UACommands>(Arena*);
template<> ::UAConfirmConnected* Arena::CreateMaybeMessage<::UAConfirmConnected>(Arena*);
template<> ::UADelivered* Arena::CreateMaybeMessage<::UADelivered>(Arena*);
template<> ::UADeliveryLocation* Arena::CreateMaybeMessage<::UADeliveryLocation>(Arena*);
template<> ::UAPackageRequest* Arena::CreateMaybeMessage<::UAPackageRequest>(Arena*);
template<> ::UATruck* Arena::CreateMaybeMessage<::UATruck>(Arena*);
template<> ::UATruckArrived* Arena::CreateMaybeMessage<::UATruckArrived>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AUInitConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUInitConnect) */ {
 public:
  inline AUInitConnect() : AUInitConnect(nullptr) {}
  ~AUInitConnect() override;
  explicit PROTOBUF_CONSTEXPR AUInitConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUInitConnect(const AUInitConnect& from);
  AUInitConnect(AUInitConnect&& from) noexcept
    : AUInitConnect() {
    *this = ::std::move(from);
  }

  inline AUInitConnect& operator=(const AUInitConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUInitConnect& operator=(AUInitConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUInitConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUInitConnect* internal_default_instance() {
    return reinterpret_cast<const AUInitConnect*>(
               &_AUInitConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AUInitConnect& a, AUInitConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(AUInitConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUInitConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUInitConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUInitConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUInitConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUInitConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUInitConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUInitConnect";
  }
  protected:
  explicit AUInitConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldidFieldNumber = 1,
    kSeqnumFieldNumber = 2,
  };
  // required int64 worldid = 1;
  bool has_worldid() const;
  private:
  bool _internal_has_worldid() const;
  public:
  void clear_worldid();
  int64_t worldid() const;
  void set_worldid(int64_t value);
  private:
  int64_t _internal_worldid() const;
  void _internal_set_worldid(int64_t value);
  public:

  // required int64 seqnum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUInitConnect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t worldid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class UAConfirmConnected final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAConfirmConnected) */ {
 public:
  inline UAConfirmConnected() : UAConfirmConnected(nullptr) {}
  ~UAConfirmConnected() override;
  explicit PROTOBUF_CONSTEXPR UAConfirmConnected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAConfirmConnected(const UAConfirmConnected& from);
  UAConfirmConnected(UAConfirmConnected&& from) noexcept
    : UAConfirmConnected() {
    *this = ::std::move(from);
  }

  inline UAConfirmConnected& operator=(const UAConfirmConnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAConfirmConnected& operator=(UAConfirmConnected&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAConfirmConnected& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAConfirmConnected* internal_default_instance() {
    return reinterpret_cast<const UAConfirmConnected*>(
               &_UAConfirmConnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UAConfirmConnected& a, UAConfirmConnected& b) {
    a.Swap(&b);
  }
  inline void Swap(UAConfirmConnected* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAConfirmConnected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAConfirmConnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAConfirmConnected>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAConfirmConnected& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAConfirmConnected& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAConfirmConnected* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAConfirmConnected";
  }
  protected:
  explicit UAConfirmConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldidFieldNumber = 1,
    kSeqnumFieldNumber = 3,
    kConnectedFieldNumber = 2,
  };
  // required int64 worldid = 1;
  bool has_worldid() const;
  private:
  bool _internal_has_worldid() const;
  public:
  void clear_worldid();
  int64_t worldid() const;
  void set_worldid(int64_t value);
  private:
  int64_t _internal_worldid() const;
  void _internal_set_worldid(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required bool connected = 2;
  bool has_connected() const;
  private:
  bool _internal_has_connected() const;
  public:
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UAConfirmConnected)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t worldid_;
  int64_t seqnum_;
  bool connected_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class AUInitPickUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUInitPickUp) */ {
 public:
  inline AUInitPickUp() : AUInitPickUp(nullptr) {}
  ~AUInitPickUp() override;
  explicit PROTOBUF_CONSTEXPR AUInitPickUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUInitPickUp(const AUInitPickUp& from);
  AUInitPickUp(AUInitPickUp&& from) noexcept
    : AUInitPickUp() {
    *this = ::std::move(from);
  }

  inline AUInitPickUp& operator=(const AUInitPickUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUInitPickUp& operator=(AUInitPickUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUInitPickUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUInitPickUp* internal_default_instance() {
    return reinterpret_cast<const AUInitPickUp*>(
               &_AUInitPickUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AUInitPickUp& a, AUInitPickUp& b) {
    a.Swap(&b);
  }
  inline void Swap(AUInitPickUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUInitPickUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUInitPickUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUInitPickUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUInitPickUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUInitPickUp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUInitPickUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUInitPickUp";
  }
  protected:
  explicit AUInitPickUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountnameFieldNumber = 3,
    kSeqnumFieldNumber = 2,
    kPackageidFieldNumber = 4,
    kWhidFieldNumber = 1,
  };
  // required string accountname = 3;
  bool has_accountname() const;
  private:
  bool _internal_has_accountname() const;
  public:
  void clear_accountname();
  const std::string& accountname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accountname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accountname();
  PROTOBUF_NODISCARD std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // required int64 seqnum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int64 packageid = 4;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int32 whid = 1;
  bool has_whid() const;
  private:
  bool _internal_has_whid() const;
  public:
  void clear_whid();
  int32_t whid() const;
  void set_whid(int32_t value);
  private:
  int32_t _internal_whid() const;
  void _internal_set_whid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUInitPickUp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
  int64_t seqnum_;
  int64_t packageid_;
  int32_t whid_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class UATruckArrived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UATruckArrived) */ {
 public:
  inline UATruckArrived() : UATruckArrived(nullptr) {}
  ~UATruckArrived() override;
  explicit PROTOBUF_CONSTEXPR UATruckArrived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UATruckArrived(const UATruckArrived& from);
  UATruckArrived(UATruckArrived&& from) noexcept
    : UATruckArrived() {
    *this = ::std::move(from);
  }

  inline UATruckArrived& operator=(const UATruckArrived& from) {
    CopyFrom(from);
    return *this;
  }
  inline UATruckArrived& operator=(UATruckArrived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UATruckArrived& default_instance() {
    return *internal_default_instance();
  }
  static inline const UATruckArrived* internal_default_instance() {
    return reinterpret_cast<const UATruckArrived*>(
               &_UATruckArrived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UATruckArrived& a, UATruckArrived& b) {
    a.Swap(&b);
  }
  inline void Swap(UATruckArrived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UATruckArrived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UATruckArrived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UATruckArrived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UATruckArrived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UATruckArrived& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UATruckArrived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UATruckArrived";
  }
  protected:
  explicit UATruckArrived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipidFieldNumber = 2,
    kSeqnumFieldNumber = 3,
    kTruckidFieldNumber = 1,
  };
  // required int64 shipid = 2;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UATruckArrived)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t shipid_;
  int64_t seqnum_;
  int32_t truckid_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class AULoaded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AULoaded) */ {
 public:
  inline AULoaded() : AULoaded(nullptr) {}
  ~AULoaded() override;
  explicit PROTOBUF_CONSTEXPR AULoaded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AULoaded(const AULoaded& from);
  AULoaded(AULoaded&& from) noexcept
    : AULoaded() {
    *this = ::std::move(from);
  }

  inline AULoaded& operator=(const AULoaded& from) {
    CopyFrom(from);
    return *this;
  }
  inline AULoaded& operator=(AULoaded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AULoaded& default_instance() {
    return *internal_default_instance();
  }
  static inline const AULoaded* internal_default_instance() {
    return reinterpret_cast<const AULoaded*>(
               &_AULoaded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AULoaded& a, AULoaded& b) {
    a.Swap(&b);
  }
  inline void Swap(AULoaded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AULoaded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AULoaded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AULoaded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AULoaded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AULoaded& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AULoaded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AULoaded";
  }
  protected:
  explicit AULoaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipidFieldNumber = 1,
    kSeqnumFieldNumber = 2,
  };
  // required int64 shipid = 1;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int64 seqnum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AULoaded)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t shipid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class UADelivered final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UADelivered) */ {
 public:
  inline UADelivered() : UADelivered(nullptr) {}
  ~UADelivered() override;
  explicit PROTOBUF_CONSTEXPR UADelivered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UADelivered(const UADelivered& from);
  UADelivered(UADelivered&& from) noexcept
    : UADelivered() {
    *this = ::std::move(from);
  }

  inline UADelivered& operator=(const UADelivered& from) {
    CopyFrom(from);
    return *this;
  }
  inline UADelivered& operator=(UADelivered&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UADelivered& default_instance() {
    return *internal_default_instance();
  }
  static inline const UADelivered* internal_default_instance() {
    return reinterpret_cast<const UADelivered*>(
               &_UADelivered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UADelivered& a, UADelivered& b) {
    a.Swap(&b);
  }
  inline void Swap(UADelivered* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UADelivered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UADelivered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UADelivered>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UADelivered& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UADelivered& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UADelivered* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UADelivered";
  }
  protected:
  explicit UADelivered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 2,
    kSeqnumFieldNumber = 3,
    kTruckidFieldNumber = 1,
  };
  // required int64 packageid = 2;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UADelivered)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int64_t seqnum_;
  int32_t truckid_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class UATruck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UATruck) */ {
 public:
  inline UATruck() : UATruck(nullptr) {}
  ~UATruck() override;
  explicit PROTOBUF_CONSTEXPR UATruck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UATruck(const UATruck& from);
  UATruck(UATruck&& from) noexcept
    : UATruck() {
    *this = ::std::move(from);
  }

  inline UATruck& operator=(const UATruck& from) {
    CopyFrom(from);
    return *this;
  }
  inline UATruck& operator=(UATruck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UATruck& default_instance() {
    return *internal_default_instance();
  }
  static inline const UATruck* internal_default_instance() {
    return reinterpret_cast<const UATruck*>(
               &_UATruck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UATruck& a, UATruck& b) {
    a.Swap(&b);
  }
  inline void Swap(UATruck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UATruck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UATruck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UATruck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UATruck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UATruck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UATruck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UATruck";
  }
  protected:
  explicit UATruck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kTruckidFieldNumber = 1,
    kXFieldNumber = 3,
    kSeqnumFieldNumber = 5,
    kYFieldNumber = 4,
  };
  // required string status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // required int32 truckid = 1;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // required int32 x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int64 seqnum = 5;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UATruck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  int32_t truckid_;
  int32_t x_;
  int64_t seqnum_;
  int32_t y_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class AUProduct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUProduct) */ {
 public:
  inline AUProduct() : AUProduct(nullptr) {}
  ~AUProduct() override;
  explicit PROTOBUF_CONSTEXPR AUProduct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUProduct(const AUProduct& from);
  AUProduct(AUProduct&& from) noexcept
    : AUProduct() {
    *this = ::std::move(from);
  }

  inline AUProduct& operator=(const AUProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUProduct& operator=(AUProduct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUProduct& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUProduct* internal_default_instance() {
    return reinterpret_cast<const AUProduct*>(
               &_AUProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AUProduct& a, AUProduct& b) {
    a.Swap(&b);
  }
  inline void Swap(AUProduct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUProduct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUProduct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUProduct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUProduct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUProduct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUProduct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUProduct";
  }
  protected:
  explicit AUProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kIdFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // required string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // required int32 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUProduct)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int64_t id_;
  int32_t count_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class UAPackageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAPackageRequest) */ {
 public:
  inline UAPackageRequest() : UAPackageRequest(nullptr) {}
  ~UAPackageRequest() override;
  explicit PROTOBUF_CONSTEXPR UAPackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAPackageRequest(const UAPackageRequest& from);
  UAPackageRequest(UAPackageRequest&& from) noexcept
    : UAPackageRequest() {
    *this = ::std::move(from);
  }

  inline UAPackageRequest& operator=(const UAPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAPackageRequest& operator=(UAPackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAPackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAPackageRequest* internal_default_instance() {
    return reinterpret_cast<const UAPackageRequest*>(
               &_UAPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UAPackageRequest& a, UAPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UAPackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAPackageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAPackageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAPackageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAPackageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAPackageRequest";
  }
  protected:
  explicit UAPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kSeqnumFieldNumber = 2,
  };
  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int64 seqnum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UAPackageRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class UADeliveryLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UADeliveryLocation) */ {
 public:
  inline UADeliveryLocation() : UADeliveryLocation(nullptr) {}
  ~UADeliveryLocation() override;
  explicit PROTOBUF_CONSTEXPR UADeliveryLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UADeliveryLocation(const UADeliveryLocation& from);
  UADeliveryLocation(UADeliveryLocation&& from) noexcept
    : UADeliveryLocation() {
    *this = ::std::move(from);
  }

  inline UADeliveryLocation& operator=(const UADeliveryLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UADeliveryLocation& operator=(UADeliveryLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UADeliveryLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UADeliveryLocation* internal_default_instance() {
    return reinterpret_cast<const UADeliveryLocation*>(
               &_UADeliveryLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UADeliveryLocation& a, UADeliveryLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(UADeliveryLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UADeliveryLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UADeliveryLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UADeliveryLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UADeliveryLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UADeliveryLocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UADeliveryLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UADeliveryLocation";
  }
  protected:
  explicit UADeliveryLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UADeliveryLocation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class AUPackageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUPackageResponse) */ {
 public:
  inline AUPackageResponse() : AUPackageResponse(nullptr) {}
  ~AUPackageResponse() override;
  explicit PROTOBUF_CONSTEXPR AUPackageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUPackageResponse(const AUPackageResponse& from);
  AUPackageResponse(AUPackageResponse&& from) noexcept
    : AUPackageResponse() {
    *this = ::std::move(from);
  }

  inline AUPackageResponse& operator=(const AUPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUPackageResponse& operator=(AUPackageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUPackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUPackageResponse* internal_default_instance() {
    return reinterpret_cast<const AUPackageResponse*>(
               &_AUPackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AUPackageResponse& a, AUPackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AUPackageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUPackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUPackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUPackageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUPackageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUPackageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUPackageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUPackageResponse";
  }
  protected:
  explicit AUPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
    kProductFieldNumber = 2,
    kSeqnumFieldNumber = 3,
  };
  // required .UADeliveryLocation package = 1;
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::UADeliveryLocation& package() const;
  PROTOBUF_NODISCARD ::UADeliveryLocation* release_package();
  ::UADeliveryLocation* mutable_package();
  void set_allocated_package(::UADeliveryLocation* package);
  private:
  const ::UADeliveryLocation& _internal_package() const;
  ::UADeliveryLocation* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::UADeliveryLocation* package);
  ::UADeliveryLocation* unsafe_arena_release_package();

  // required .AUProduct product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::AUProduct& product() const;
  PROTOBUF_NODISCARD ::AUProduct* release_product();
  ::AUProduct* mutable_product();
  void set_allocated_product(::AUProduct* product);
  private:
  const ::AUProduct& _internal_product() const;
  ::AUProduct* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::AUProduct* product);
  ::AUProduct* unsafe_arena_release_product();

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUPackageResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::UADeliveryLocation* package_;
  ::AUProduct* product_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class AUCommands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUCommands) */ {
 public:
  inline AUCommands() : AUCommands(nullptr) {}
  ~AUCommands() override;
  explicit PROTOBUF_CONSTEXPR AUCommands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUCommands(const AUCommands& from);
  AUCommands(AUCommands&& from) noexcept
    : AUCommands() {
    *this = ::std::move(from);
  }

  inline AUCommands& operator=(const AUCommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUCommands& operator=(AUCommands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUCommands& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUCommands* internal_default_instance() {
    return reinterpret_cast<const AUCommands*>(
               &_AUCommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AUCommands& a, AUCommands& b) {
    a.Swap(&b);
  }
  inline void Swap(AUCommands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUCommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUCommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUCommands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUCommands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUCommands& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUCommands* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUCommands";
  }
  protected:
  explicit AUCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPickupreqFieldNumber = 1,
    kLoadedFieldNumber = 2,
    kPackageresponseFieldNumber = 3,
    kAcksFieldNumber = 4,
  };
  // repeated .AUInitPickUp pickupreq = 1;
  int pickupreq_size() const;
  private:
  int _internal_pickupreq_size() const;
  public:
  void clear_pickupreq();
  ::AUInitPickUp* mutable_pickupreq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUInitPickUp >*
      mutable_pickupreq();
  private:
  const ::AUInitPickUp& _internal_pickupreq(int index) const;
  ::AUInitPickUp* _internal_add_pickupreq();
  public:
  const ::AUInitPickUp& pickupreq(int index) const;
  ::AUInitPickUp* add_pickupreq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUInitPickUp >&
      pickupreq() const;

  // repeated .AULoaded loaded = 2;
  int loaded_size() const;
  private:
  int _internal_loaded_size() const;
  public:
  void clear_loaded();
  ::AULoaded* mutable_loaded(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AULoaded >*
      mutable_loaded();
  private:
  const ::AULoaded& _internal_loaded(int index) const;
  ::AULoaded* _internal_add_loaded();
  public:
  const ::AULoaded& loaded(int index) const;
  ::AULoaded* add_loaded();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AULoaded >&
      loaded() const;

  // repeated .AUPackageResponse packageresponse = 3;
  int packageresponse_size() const;
  private:
  int _internal_packageresponse_size() const;
  public:
  void clear_packageresponse();
  ::AUPackageResponse* mutable_packageresponse(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUPackageResponse >*
      mutable_packageresponse();
  private:
  const ::AUPackageResponse& _internal_packageresponse(int index) const;
  ::AUPackageResponse* _internal_add_packageresponse();
  public:
  const ::AUPackageResponse& packageresponse(int index) const;
  ::AUPackageResponse* add_packageresponse();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUPackageResponse >&
      packageresponse() const;

  // repeated int64 acks = 4;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // @@protoc_insertion_point(class_scope:AUCommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUInitPickUp > pickupreq_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AULoaded > loaded_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUPackageResponse > packageresponse_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// -------------------------------------------------------------------

class UACommands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UACommands) */ {
 public:
  inline UACommands() : UACommands(nullptr) {}
  ~UACommands() override;
  explicit PROTOBUF_CONSTEXPR UACommands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UACommands(const UACommands& from);
  UACommands(UACommands&& from) noexcept
    : UACommands() {
    *this = ::std::move(from);
  }

  inline UACommands& operator=(const UACommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline UACommands& operator=(UACommands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UACommands& default_instance() {
    return *internal_default_instance();
  }
  static inline const UACommands* internal_default_instance() {
    return reinterpret_cast<const UACommands*>(
               &_UACommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UACommands& a, UACommands& b) {
    a.Swap(&b);
  }
  inline void Swap(UACommands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UACommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UACommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UACommands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UACommands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UACommands& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UACommands* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UACommands";
  }
  protected:
  explicit UACommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTruckarrivedFieldNumber = 1,
    kDeliveredFieldNumber = 2,
    kTrucksFieldNumber = 3,
    kPackagerequestFieldNumber = 4,
    kAcksFieldNumber = 5,
  };
  // repeated .UATruckArrived truckarrived = 1;
  int truckarrived_size() const;
  private:
  int _internal_truckarrived_size() const;
  public:
  void clear_truckarrived();
  ::UATruckArrived* mutable_truckarrived(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruckArrived >*
      mutable_truckarrived();
  private:
  const ::UATruckArrived& _internal_truckarrived(int index) const;
  ::UATruckArrived* _internal_add_truckarrived();
  public:
  const ::UATruckArrived& truckarrived(int index) const;
  ::UATruckArrived* add_truckarrived();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruckArrived >&
      truckarrived() const;

  // repeated .UADelivered delivered = 2;
  int delivered_size() const;
  private:
  int _internal_delivered_size() const;
  public:
  void clear_delivered();
  ::UADelivered* mutable_delivered(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UADelivered >*
      mutable_delivered();
  private:
  const ::UADelivered& _internal_delivered(int index) const;
  ::UADelivered* _internal_add_delivered();
  public:
  const ::UADelivered& delivered(int index) const;
  ::UADelivered* add_delivered();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UADelivered >&
      delivered() const;

  // repeated .UATruck trucks = 3;
  int trucks_size() const;
  private:
  int _internal_trucks_size() const;
  public:
  void clear_trucks();
  ::UATruck* mutable_trucks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruck >*
      mutable_trucks();
  private:
  const ::UATruck& _internal_trucks(int index) const;
  ::UATruck* _internal_add_trucks();
  public:
  const ::UATruck& trucks(int index) const;
  ::UATruck* add_trucks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruck >&
      trucks() const;

  // repeated .UAPackageRequest packagerequest = 4;
  int packagerequest_size() const;
  private:
  int _internal_packagerequest_size() const;
  public:
  void clear_packagerequest();
  ::UAPackageRequest* mutable_packagerequest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAPackageRequest >*
      mutable_packagerequest();
  private:
  const ::UAPackageRequest& _internal_packagerequest(int index) const;
  ::UAPackageRequest* _internal_add_packagerequest();
  public:
  const ::UAPackageRequest& packagerequest(int index) const;
  ::UAPackageRequest* add_packagerequest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAPackageRequest >&
      packagerequest() const;

  // repeated int64 acks = 5;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // @@protoc_insertion_point(class_scope:UACommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruckArrived > truckarrived_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UADelivered > delivered_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruck > trucks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAPackageRequest > packagerequest_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ups_2damazon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AUInitConnect

// required int64 worldid = 1;
inline bool AUInitConnect::_internal_has_worldid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUInitConnect::has_worldid() const {
  return _internal_has_worldid();
}
inline void AUInitConnect::clear_worldid() {
  worldid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t AUInitConnect::_internal_worldid() const {
  return worldid_;
}
inline int64_t AUInitConnect::worldid() const {
  // @@protoc_insertion_point(field_get:AUInitConnect.worldid)
  return _internal_worldid();
}
inline void AUInitConnect::_internal_set_worldid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  worldid_ = value;
}
inline void AUInitConnect::set_worldid(int64_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:AUInitConnect.worldid)
}

// required int64 seqnum = 2;
inline bool AUInitConnect::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUInitConnect::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AUInitConnect::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AUInitConnect::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AUInitConnect::seqnum() const {
  // @@protoc_insertion_point(field_get:AUInitConnect.seqnum)
  return _internal_seqnum();
}
inline void AUInitConnect::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void AUInitConnect::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AUInitConnect.seqnum)
}

// -------------------------------------------------------------------

// UAConfirmConnected

// required int64 worldid = 1;
inline bool UAConfirmConnected::_internal_has_worldid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAConfirmConnected::has_worldid() const {
  return _internal_has_worldid();
}
inline void UAConfirmConnected::clear_worldid() {
  worldid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UAConfirmConnected::_internal_worldid() const {
  return worldid_;
}
inline int64_t UAConfirmConnected::worldid() const {
  // @@protoc_insertion_point(field_get:UAConfirmConnected.worldid)
  return _internal_worldid();
}
inline void UAConfirmConnected::_internal_set_worldid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  worldid_ = value;
}
inline void UAConfirmConnected::set_worldid(int64_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:UAConfirmConnected.worldid)
}

// required bool connected = 2;
inline bool UAConfirmConnected::_internal_has_connected() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UAConfirmConnected::has_connected() const {
  return _internal_has_connected();
}
inline void UAConfirmConnected::clear_connected() {
  connected_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool UAConfirmConnected::_internal_connected() const {
  return connected_;
}
inline bool UAConfirmConnected::connected() const {
  // @@protoc_insertion_point(field_get:UAConfirmConnected.connected)
  return _internal_connected();
}
inline void UAConfirmConnected::_internal_set_connected(bool value) {
  _has_bits_[0] |= 0x00000004u;
  connected_ = value;
}
inline void UAConfirmConnected::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:UAConfirmConnected.connected)
}

// required int64 seqnum = 3;
inline bool UAConfirmConnected::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UAConfirmConnected::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UAConfirmConnected::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UAConfirmConnected::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UAConfirmConnected::seqnum() const {
  // @@protoc_insertion_point(field_get:UAConfirmConnected.seqnum)
  return _internal_seqnum();
}
inline void UAConfirmConnected::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void UAConfirmConnected::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UAConfirmConnected.seqnum)
}

// -------------------------------------------------------------------

// AUInitPickUp

// required int32 whid = 1;
inline bool AUInitPickUp::_internal_has_whid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AUInitPickUp::has_whid() const {
  return _internal_has_whid();
}
inline void AUInitPickUp::clear_whid() {
  whid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t AUInitPickUp::_internal_whid() const {
  return whid_;
}
inline int32_t AUInitPickUp::whid() const {
  // @@protoc_insertion_point(field_get:AUInitPickUp.whid)
  return _internal_whid();
}
inline void AUInitPickUp::_internal_set_whid(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  whid_ = value;
}
inline void AUInitPickUp::set_whid(int32_t value) {
  _internal_set_whid(value);
  // @@protoc_insertion_point(field_set:AUInitPickUp.whid)
}

// required int64 seqnum = 2;
inline bool AUInitPickUp::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUInitPickUp::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AUInitPickUp::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AUInitPickUp::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AUInitPickUp::seqnum() const {
  // @@protoc_insertion_point(field_get:AUInitPickUp.seqnum)
  return _internal_seqnum();
}
inline void AUInitPickUp::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void AUInitPickUp::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AUInitPickUp.seqnum)
}

// required string accountname = 3;
inline bool AUInitPickUp::_internal_has_accountname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUInitPickUp::has_accountname() const {
  return _internal_has_accountname();
}
inline void AUInitPickUp::clear_accountname() {
  accountname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AUInitPickUp::accountname() const {
  // @@protoc_insertion_point(field_get:AUInitPickUp.accountname)
  return _internal_accountname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AUInitPickUp::set_accountname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 accountname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AUInitPickUp.accountname)
}
inline std::string* AUInitPickUp::mutable_accountname() {
  std::string* _s = _internal_mutable_accountname();
  // @@protoc_insertion_point(field_mutable:AUInitPickUp.accountname)
  return _s;
}
inline const std::string& AUInitPickUp::_internal_accountname() const {
  return accountname_.Get();
}
inline void AUInitPickUp::_internal_set_accountname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  accountname_.Set(value, GetArenaForAllocation());
}
inline std::string* AUInitPickUp::_internal_mutable_accountname() {
  _has_bits_[0] |= 0x00000001u;
  return accountname_.Mutable(GetArenaForAllocation());
}
inline std::string* AUInitPickUp::release_accountname() {
  // @@protoc_insertion_point(field_release:AUInitPickUp.accountname)
  if (!_internal_has_accountname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = accountname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accountname_.IsDefault()) {
    accountname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AUInitPickUp::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accountname_.SetAllocated(accountname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accountname_.IsDefault()) {
    accountname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AUInitPickUp.accountname)
}

// required int64 packageid = 4;
inline bool AUInitPickUp::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AUInitPickUp::has_packageid() const {
  return _internal_has_packageid();
}
inline void AUInitPickUp::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t AUInitPickUp::_internal_packageid() const {
  return packageid_;
}
inline int64_t AUInitPickUp::packageid() const {
  // @@protoc_insertion_point(field_get:AUInitPickUp.packageid)
  return _internal_packageid();
}
inline void AUInitPickUp::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  packageid_ = value;
}
inline void AUInitPickUp::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:AUInitPickUp.packageid)
}

// -------------------------------------------------------------------

// UATruckArrived

// required int32 truckid = 1;
inline bool UATruckArrived::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UATruckArrived::has_truckid() const {
  return _internal_has_truckid();
}
inline void UATruckArrived::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UATruckArrived::_internal_truckid() const {
  return truckid_;
}
inline int32_t UATruckArrived::truckid() const {
  // @@protoc_insertion_point(field_get:UATruckArrived.truckid)
  return _internal_truckid();
}
inline void UATruckArrived::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  truckid_ = value;
}
inline void UATruckArrived::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UATruckArrived.truckid)
}

// required int64 shipid = 2;
inline bool UATruckArrived::_internal_has_shipid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UATruckArrived::has_shipid() const {
  return _internal_has_shipid();
}
inline void UATruckArrived::clear_shipid() {
  shipid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UATruckArrived::_internal_shipid() const {
  return shipid_;
}
inline int64_t UATruckArrived::shipid() const {
  // @@protoc_insertion_point(field_get:UATruckArrived.shipid)
  return _internal_shipid();
}
inline void UATruckArrived::_internal_set_shipid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  shipid_ = value;
}
inline void UATruckArrived::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:UATruckArrived.shipid)
}

// required int64 seqnum = 3;
inline bool UATruckArrived::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UATruckArrived::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UATruckArrived::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UATruckArrived::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UATruckArrived::seqnum() const {
  // @@protoc_insertion_point(field_get:UATruckArrived.seqnum)
  return _internal_seqnum();
}
inline void UATruckArrived::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void UATruckArrived::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UATruckArrived.seqnum)
}

// -------------------------------------------------------------------

// AULoaded

// required int64 shipid = 1;
inline bool AULoaded::_internal_has_shipid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AULoaded::has_shipid() const {
  return _internal_has_shipid();
}
inline void AULoaded::clear_shipid() {
  shipid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t AULoaded::_internal_shipid() const {
  return shipid_;
}
inline int64_t AULoaded::shipid() const {
  // @@protoc_insertion_point(field_get:AULoaded.shipid)
  return _internal_shipid();
}
inline void AULoaded::_internal_set_shipid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  shipid_ = value;
}
inline void AULoaded::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:AULoaded.shipid)
}

// required int64 seqnum = 2;
inline bool AULoaded::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AULoaded::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AULoaded::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AULoaded::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AULoaded::seqnum() const {
  // @@protoc_insertion_point(field_get:AULoaded.seqnum)
  return _internal_seqnum();
}
inline void AULoaded::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void AULoaded::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AULoaded.seqnum)
}

// -------------------------------------------------------------------

// UADelivered

// required int32 truckid = 1;
inline bool UADelivered::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UADelivered::has_truckid() const {
  return _internal_has_truckid();
}
inline void UADelivered::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UADelivered::_internal_truckid() const {
  return truckid_;
}
inline int32_t UADelivered::truckid() const {
  // @@protoc_insertion_point(field_get:UADelivered.truckid)
  return _internal_truckid();
}
inline void UADelivered::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  truckid_ = value;
}
inline void UADelivered::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UADelivered.truckid)
}

// required int64 packageid = 2;
inline bool UADelivered::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UADelivered::has_packageid() const {
  return _internal_has_packageid();
}
inline void UADelivered::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UADelivered::_internal_packageid() const {
  return packageid_;
}
inline int64_t UADelivered::packageid() const {
  // @@protoc_insertion_point(field_get:UADelivered.packageid)
  return _internal_packageid();
}
inline void UADelivered::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UADelivered::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UADelivered.packageid)
}

// required int64 seqnum = 3;
inline bool UADelivered::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UADelivered::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UADelivered::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UADelivered::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UADelivered::seqnum() const {
  // @@protoc_insertion_point(field_get:UADelivered.seqnum)
  return _internal_seqnum();
}
inline void UADelivered::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void UADelivered::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UADelivered.seqnum)
}

// -------------------------------------------------------------------

// UATruck

// required int32 truckid = 1;
inline bool UATruck::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UATruck::has_truckid() const {
  return _internal_has_truckid();
}
inline void UATruck::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UATruck::_internal_truckid() const {
  return truckid_;
}
inline int32_t UATruck::truckid() const {
  // @@protoc_insertion_point(field_get:UATruck.truckid)
  return _internal_truckid();
}
inline void UATruck::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  truckid_ = value;
}
inline void UATruck::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UATruck.truckid)
}

// required string status = 2;
inline bool UATruck::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UATruck::has_status() const {
  return _internal_has_status();
}
inline void UATruck::clear_status() {
  status_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UATruck::status() const {
  // @@protoc_insertion_point(field_get:UATruck.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UATruck::set_status(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UATruck.status)
}
inline std::string* UATruck::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:UATruck.status)
  return _s;
}
inline const std::string& UATruck::_internal_status() const {
  return status_.Get();
}
inline void UATruck::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* UATruck::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* UATruck::release_status() {
  // @@protoc_insertion_point(field_release:UATruck.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = status_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UATruck::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UATruck.status)
}

// required int32 x = 3;
inline bool UATruck::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UATruck::has_x() const {
  return _internal_has_x();
}
inline void UATruck::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UATruck::_internal_x() const {
  return x_;
}
inline int32_t UATruck::x() const {
  // @@protoc_insertion_point(field_get:UATruck.x)
  return _internal_x();
}
inline void UATruck::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void UATruck::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:UATruck.x)
}

// required int32 y = 4;
inline bool UATruck::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UATruck::has_y() const {
  return _internal_has_y();
}
inline void UATruck::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t UATruck::_internal_y() const {
  return y_;
}
inline int32_t UATruck::y() const {
  // @@protoc_insertion_point(field_get:UATruck.y)
  return _internal_y();
}
inline void UATruck::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void UATruck::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:UATruck.y)
}

// required int64 seqnum = 5;
inline bool UATruck::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UATruck::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UATruck::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t UATruck::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UATruck::seqnum() const {
  // @@protoc_insertion_point(field_get:UATruck.seqnum)
  return _internal_seqnum();
}
inline void UATruck::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  seqnum_ = value;
}
inline void UATruck::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UATruck.seqnum)
}

// -------------------------------------------------------------------

// AUProduct

// required int64 id = 1;
inline bool AUProduct::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUProduct::has_id() const {
  return _internal_has_id();
}
inline void AUProduct::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AUProduct::_internal_id() const {
  return id_;
}
inline int64_t AUProduct::id() const {
  // @@protoc_insertion_point(field_get:AUProduct.id)
  return _internal_id();
}
inline void AUProduct::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void AUProduct::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AUProduct.id)
}

// required string description = 2;
inline bool AUProduct::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUProduct::has_description() const {
  return _internal_has_description();
}
inline void AUProduct::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AUProduct::description() const {
  // @@protoc_insertion_point(field_get:AUProduct.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AUProduct::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AUProduct.description)
}
inline std::string* AUProduct::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:AUProduct.description)
  return _s;
}
inline const std::string& AUProduct::_internal_description() const {
  return description_.Get();
}
inline void AUProduct::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* AUProduct::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* AUProduct::release_description() {
  // @@protoc_insertion_point(field_release:AUProduct.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AUProduct::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AUProduct.description)
}

// required int32 count = 3;
inline bool AUProduct::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AUProduct::has_count() const {
  return _internal_has_count();
}
inline void AUProduct::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AUProduct::_internal_count() const {
  return count_;
}
inline int32_t AUProduct::count() const {
  // @@protoc_insertion_point(field_get:AUProduct.count)
  return _internal_count();
}
inline void AUProduct::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void AUProduct::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:AUProduct.count)
}

// -------------------------------------------------------------------

// UAPackageRequest

// required int64 packageid = 1;
inline bool UAPackageRequest::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAPackageRequest::has_packageid() const {
  return _internal_has_packageid();
}
inline void UAPackageRequest::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UAPackageRequest::_internal_packageid() const {
  return packageid_;
}
inline int64_t UAPackageRequest::packageid() const {
  // @@protoc_insertion_point(field_get:UAPackageRequest.packageid)
  return _internal_packageid();
}
inline void UAPackageRequest::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UAPackageRequest::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UAPackageRequest.packageid)
}

// required int64 seqnum = 2;
inline bool UAPackageRequest::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UAPackageRequest::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UAPackageRequest::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UAPackageRequest::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UAPackageRequest::seqnum() const {
  // @@protoc_insertion_point(field_get:UAPackageRequest.seqnum)
  return _internal_seqnum();
}
inline void UAPackageRequest::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void UAPackageRequest::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UAPackageRequest.seqnum)
}

// -------------------------------------------------------------------

// UADeliveryLocation

// required int64 packageid = 1;
inline bool UADeliveryLocation::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UADeliveryLocation::has_packageid() const {
  return _internal_has_packageid();
}
inline void UADeliveryLocation::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UADeliveryLocation::_internal_packageid() const {
  return packageid_;
}
inline int64_t UADeliveryLocation::packageid() const {
  // @@protoc_insertion_point(field_get:UADeliveryLocation.packageid)
  return _internal_packageid();
}
inline void UADeliveryLocation::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UADeliveryLocation::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UADeliveryLocation.packageid)
}

// required int32 x = 2;
inline bool UADeliveryLocation::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UADeliveryLocation::has_x() const {
  return _internal_has_x();
}
inline void UADeliveryLocation::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UADeliveryLocation::_internal_x() const {
  return x_;
}
inline int32_t UADeliveryLocation::x() const {
  // @@protoc_insertion_point(field_get:UADeliveryLocation.x)
  return _internal_x();
}
inline void UADeliveryLocation::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void UADeliveryLocation::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:UADeliveryLocation.x)
}

// required int32 y = 3;
inline bool UADeliveryLocation::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UADeliveryLocation::has_y() const {
  return _internal_has_y();
}
inline void UADeliveryLocation::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UADeliveryLocation::_internal_y() const {
  return y_;
}
inline int32_t UADeliveryLocation::y() const {
  // @@protoc_insertion_point(field_get:UADeliveryLocation.y)
  return _internal_y();
}
inline void UADeliveryLocation::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void UADeliveryLocation::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:UADeliveryLocation.y)
}

// -------------------------------------------------------------------

// AUPackageResponse

// required .UADeliveryLocation package = 1;
inline bool AUPackageResponse::_internal_has_package() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || package_ != nullptr);
  return value;
}
inline bool AUPackageResponse::has_package() const {
  return _internal_has_package();
}
inline void AUPackageResponse::clear_package() {
  if (package_ != nullptr) package_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::UADeliveryLocation& AUPackageResponse::_internal_package() const {
  const ::UADeliveryLocation* p = package_;
  return p != nullptr ? *p : reinterpret_cast<const ::UADeliveryLocation&>(
      ::_UADeliveryLocation_default_instance_);
}
inline const ::UADeliveryLocation& AUPackageResponse::package() const {
  // @@protoc_insertion_point(field_get:AUPackageResponse.package)
  return _internal_package();
}
inline void AUPackageResponse::unsafe_arena_set_allocated_package(
    ::UADeliveryLocation* package) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUPackageResponse.package)
}
inline ::UADeliveryLocation* AUPackageResponse::release_package() {
  _has_bits_[0] &= ~0x00000001u;
  ::UADeliveryLocation* temp = package_;
  package_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UADeliveryLocation* AUPackageResponse::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:AUPackageResponse.package)
  _has_bits_[0] &= ~0x00000001u;
  ::UADeliveryLocation* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::UADeliveryLocation* AUPackageResponse::_internal_mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::UADeliveryLocation>(GetArenaForAllocation());
    package_ = p;
  }
  return package_;
}
inline ::UADeliveryLocation* AUPackageResponse::mutable_package() {
  ::UADeliveryLocation* _msg = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:AUPackageResponse.package)
  return _msg;
}
inline void AUPackageResponse::set_allocated_package(::UADeliveryLocation* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:AUPackageResponse.package)
}

// required .AUProduct product = 2;
inline bool AUPackageResponse::_internal_has_product() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || product_ != nullptr);
  return value;
}
inline bool AUPackageResponse::has_product() const {
  return _internal_has_product();
}
inline void AUPackageResponse::clear_product() {
  if (product_ != nullptr) product_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::AUProduct& AUPackageResponse::_internal_product() const {
  const ::AUProduct* p = product_;
  return p != nullptr ? *p : reinterpret_cast<const ::AUProduct&>(
      ::_AUProduct_default_instance_);
}
inline const ::AUProduct& AUPackageResponse::product() const {
  // @@protoc_insertion_point(field_get:AUPackageResponse.product)
  return _internal_product();
}
inline void AUPackageResponse::unsafe_arena_set_allocated_product(
    ::AUProduct* product) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUPackageResponse.product)
}
inline ::AUProduct* AUPackageResponse::release_product() {
  _has_bits_[0] &= ~0x00000002u;
  ::AUProduct* temp = product_;
  product_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AUProduct* AUPackageResponse::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:AUPackageResponse.product)
  _has_bits_[0] &= ~0x00000002u;
  ::AUProduct* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::AUProduct* AUPackageResponse::_internal_mutable_product() {
  _has_bits_[0] |= 0x00000002u;
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::AUProduct>(GetArenaForAllocation());
    product_ = p;
  }
  return product_;
}
inline ::AUProduct* AUPackageResponse::mutable_product() {
  ::AUProduct* _msg = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:AUPackageResponse.product)
  return _msg;
}
inline void AUPackageResponse::set_allocated_product(::AUProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:AUPackageResponse.product)
}

// required int64 seqnum = 3;
inline bool AUPackageResponse::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AUPackageResponse::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AUPackageResponse::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t AUPackageResponse::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AUPackageResponse::seqnum() const {
  // @@protoc_insertion_point(field_get:AUPackageResponse.seqnum)
  return _internal_seqnum();
}
inline void AUPackageResponse::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void AUPackageResponse::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AUPackageResponse.seqnum)
}

// -------------------------------------------------------------------

// AUCommands

// repeated .AUInitPickUp pickupreq = 1;
inline int AUCommands::_internal_pickupreq_size() const {
  return pickupreq_.size();
}
inline int AUCommands::pickupreq_size() const {
  return _internal_pickupreq_size();
}
inline void AUCommands::clear_pickupreq() {
  pickupreq_.Clear();
}
inline ::AUInitPickUp* AUCommands::mutable_pickupreq(int index) {
  // @@protoc_insertion_point(field_mutable:AUCommands.pickupreq)
  return pickupreq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUInitPickUp >*
AUCommands::mutable_pickupreq() {
  // @@protoc_insertion_point(field_mutable_list:AUCommands.pickupreq)
  return &pickupreq_;
}
inline const ::AUInitPickUp& AUCommands::_internal_pickupreq(int index) const {
  return pickupreq_.Get(index);
}
inline const ::AUInitPickUp& AUCommands::pickupreq(int index) const {
  // @@protoc_insertion_point(field_get:AUCommands.pickupreq)
  return _internal_pickupreq(index);
}
inline ::AUInitPickUp* AUCommands::_internal_add_pickupreq() {
  return pickupreq_.Add();
}
inline ::AUInitPickUp* AUCommands::add_pickupreq() {
  ::AUInitPickUp* _add = _internal_add_pickupreq();
  // @@protoc_insertion_point(field_add:AUCommands.pickupreq)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUInitPickUp >&
AUCommands::pickupreq() const {
  // @@protoc_insertion_point(field_list:AUCommands.pickupreq)
  return pickupreq_;
}

// repeated .AULoaded loaded = 2;
inline int AUCommands::_internal_loaded_size() const {
  return loaded_.size();
}
inline int AUCommands::loaded_size() const {
  return _internal_loaded_size();
}
inline void AUCommands::clear_loaded() {
  loaded_.Clear();
}
inline ::AULoaded* AUCommands::mutable_loaded(int index) {
  // @@protoc_insertion_point(field_mutable:AUCommands.loaded)
  return loaded_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AULoaded >*
AUCommands::mutable_loaded() {
  // @@protoc_insertion_point(field_mutable_list:AUCommands.loaded)
  return &loaded_;
}
inline const ::AULoaded& AUCommands::_internal_loaded(int index) const {
  return loaded_.Get(index);
}
inline const ::AULoaded& AUCommands::loaded(int index) const {
  // @@protoc_insertion_point(field_get:AUCommands.loaded)
  return _internal_loaded(index);
}
inline ::AULoaded* AUCommands::_internal_add_loaded() {
  return loaded_.Add();
}
inline ::AULoaded* AUCommands::add_loaded() {
  ::AULoaded* _add = _internal_add_loaded();
  // @@protoc_insertion_point(field_add:AUCommands.loaded)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AULoaded >&
AUCommands::loaded() const {
  // @@protoc_insertion_point(field_list:AUCommands.loaded)
  return loaded_;
}

// repeated .AUPackageResponse packageresponse = 3;
inline int AUCommands::_internal_packageresponse_size() const {
  return packageresponse_.size();
}
inline int AUCommands::packageresponse_size() const {
  return _internal_packageresponse_size();
}
inline void AUCommands::clear_packageresponse() {
  packageresponse_.Clear();
}
inline ::AUPackageResponse* AUCommands::mutable_packageresponse(int index) {
  // @@protoc_insertion_point(field_mutable:AUCommands.packageresponse)
  return packageresponse_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUPackageResponse >*
AUCommands::mutable_packageresponse() {
  // @@protoc_insertion_point(field_mutable_list:AUCommands.packageresponse)
  return &packageresponse_;
}
inline const ::AUPackageResponse& AUCommands::_internal_packageresponse(int index) const {
  return packageresponse_.Get(index);
}
inline const ::AUPackageResponse& AUCommands::packageresponse(int index) const {
  // @@protoc_insertion_point(field_get:AUCommands.packageresponse)
  return _internal_packageresponse(index);
}
inline ::AUPackageResponse* AUCommands::_internal_add_packageresponse() {
  return packageresponse_.Add();
}
inline ::AUPackageResponse* AUCommands::add_packageresponse() {
  ::AUPackageResponse* _add = _internal_add_packageresponse();
  // @@protoc_insertion_point(field_add:AUCommands.packageresponse)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUPackageResponse >&
AUCommands::packageresponse() const {
  // @@protoc_insertion_point(field_list:AUCommands.packageresponse)
  return packageresponse_;
}

// repeated int64 acks = 4;
inline int AUCommands::_internal_acks_size() const {
  return acks_.size();
}
inline int AUCommands::acks_size() const {
  return _internal_acks_size();
}
inline void AUCommands::clear_acks() {
  acks_.Clear();
}
inline int64_t AUCommands::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t AUCommands::acks(int index) const {
  // @@protoc_insertion_point(field_get:AUCommands.acks)
  return _internal_acks(index);
}
inline void AUCommands::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:AUCommands.acks)
}
inline void AUCommands::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void AUCommands::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:AUCommands.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AUCommands::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AUCommands::acks() const {
  // @@protoc_insertion_point(field_list:AUCommands.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AUCommands::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AUCommands::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:AUCommands.acks)
  return _internal_mutable_acks();
}

// -------------------------------------------------------------------

// UACommands

// repeated .UATruckArrived truckarrived = 1;
inline int UACommands::_internal_truckarrived_size() const {
  return truckarrived_.size();
}
inline int UACommands::truckarrived_size() const {
  return _internal_truckarrived_size();
}
inline void UACommands::clear_truckarrived() {
  truckarrived_.Clear();
}
inline ::UATruckArrived* UACommands::mutable_truckarrived(int index) {
  // @@protoc_insertion_point(field_mutable:UACommands.truckarrived)
  return truckarrived_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruckArrived >*
UACommands::mutable_truckarrived() {
  // @@protoc_insertion_point(field_mutable_list:UACommands.truckarrived)
  return &truckarrived_;
}
inline const ::UATruckArrived& UACommands::_internal_truckarrived(int index) const {
  return truckarrived_.Get(index);
}
inline const ::UATruckArrived& UACommands::truckarrived(int index) const {
  // @@protoc_insertion_point(field_get:UACommands.truckarrived)
  return _internal_truckarrived(index);
}
inline ::UATruckArrived* UACommands::_internal_add_truckarrived() {
  return truckarrived_.Add();
}
inline ::UATruckArrived* UACommands::add_truckarrived() {
  ::UATruckArrived* _add = _internal_add_truckarrived();
  // @@protoc_insertion_point(field_add:UACommands.truckarrived)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruckArrived >&
UACommands::truckarrived() const {
  // @@protoc_insertion_point(field_list:UACommands.truckarrived)
  return truckarrived_;
}

// repeated .UADelivered delivered = 2;
inline int UACommands::_internal_delivered_size() const {
  return delivered_.size();
}
inline int UACommands::delivered_size() const {
  return _internal_delivered_size();
}
inline void UACommands::clear_delivered() {
  delivered_.Clear();
}
inline ::UADelivered* UACommands::mutable_delivered(int index) {
  // @@protoc_insertion_point(field_mutable:UACommands.delivered)
  return delivered_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UADelivered >*
UACommands::mutable_delivered() {
  // @@protoc_insertion_point(field_mutable_list:UACommands.delivered)
  return &delivered_;
}
inline const ::UADelivered& UACommands::_internal_delivered(int index) const {
  return delivered_.Get(index);
}
inline const ::UADelivered& UACommands::delivered(int index) const {
  // @@protoc_insertion_point(field_get:UACommands.delivered)
  return _internal_delivered(index);
}
inline ::UADelivered* UACommands::_internal_add_delivered() {
  return delivered_.Add();
}
inline ::UADelivered* UACommands::add_delivered() {
  ::UADelivered* _add = _internal_add_delivered();
  // @@protoc_insertion_point(field_add:UACommands.delivered)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UADelivered >&
UACommands::delivered() const {
  // @@protoc_insertion_point(field_list:UACommands.delivered)
  return delivered_;
}

// repeated .UATruck trucks = 3;
inline int UACommands::_internal_trucks_size() const {
  return trucks_.size();
}
inline int UACommands::trucks_size() const {
  return _internal_trucks_size();
}
inline void UACommands::clear_trucks() {
  trucks_.Clear();
}
inline ::UATruck* UACommands::mutable_trucks(int index) {
  // @@protoc_insertion_point(field_mutable:UACommands.trucks)
  return trucks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruck >*
UACommands::mutable_trucks() {
  // @@protoc_insertion_point(field_mutable_list:UACommands.trucks)
  return &trucks_;
}
inline const ::UATruck& UACommands::_internal_trucks(int index) const {
  return trucks_.Get(index);
}
inline const ::UATruck& UACommands::trucks(int index) const {
  // @@protoc_insertion_point(field_get:UACommands.trucks)
  return _internal_trucks(index);
}
inline ::UATruck* UACommands::_internal_add_trucks() {
  return trucks_.Add();
}
inline ::UATruck* UACommands::add_trucks() {
  ::UATruck* _add = _internal_add_trucks();
  // @@protoc_insertion_point(field_add:UACommands.trucks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UATruck >&
UACommands::trucks() const {
  // @@protoc_insertion_point(field_list:UACommands.trucks)
  return trucks_;
}

// repeated .UAPackageRequest packagerequest = 4;
inline int UACommands::_internal_packagerequest_size() const {
  return packagerequest_.size();
}
inline int UACommands::packagerequest_size() const {
  return _internal_packagerequest_size();
}
inline void UACommands::clear_packagerequest() {
  packagerequest_.Clear();
}
inline ::UAPackageRequest* UACommands::mutable_packagerequest(int index) {
  // @@protoc_insertion_point(field_mutable:UACommands.packagerequest)
  return packagerequest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAPackageRequest >*
UACommands::mutable_packagerequest() {
  // @@protoc_insertion_point(field_mutable_list:UACommands.packagerequest)
  return &packagerequest_;
}
inline const ::UAPackageRequest& UACommands::_internal_packagerequest(int index) const {
  return packagerequest_.Get(index);
}
inline const ::UAPackageRequest& UACommands::packagerequest(int index) const {
  // @@protoc_insertion_point(field_get:UACommands.packagerequest)
  return _internal_packagerequest(index);
}
inline ::UAPackageRequest* UACommands::_internal_add_packagerequest() {
  return packagerequest_.Add();
}
inline ::UAPackageRequest* UACommands::add_packagerequest() {
  ::UAPackageRequest* _add = _internal_add_packagerequest();
  // @@protoc_insertion_point(field_add:UACommands.packagerequest)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAPackageRequest >&
UACommands::packagerequest() const {
  // @@protoc_insertion_point(field_list:UACommands.packagerequest)
  return packagerequest_;
}

// repeated int64 acks = 5;
inline int UACommands::_internal_acks_size() const {
  return acks_.size();
}
inline int UACommands::acks_size() const {
  return _internal_acks_size();
}
inline void UACommands::clear_acks() {
  acks_.Clear();
}
inline int64_t UACommands::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t UACommands::acks(int index) const {
  // @@protoc_insertion_point(field_get:UACommands.acks)
  return _internal_acks(index);
}
inline void UACommands::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:UACommands.acks)
}
inline void UACommands::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void UACommands::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:UACommands.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UACommands::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UACommands::acks() const {
  // @@protoc_insertion_point(field_list:UACommands.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UACommands::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UACommands::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:UACommands.acks)
  return _internal_mutable_acks();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ups_2damazon_2eproto
