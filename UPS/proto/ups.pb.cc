// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups.proto

#include "ups.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR UInitTruck::UInitTruck(
    ::_pbi::ConstantInitialized)
  : id_(0)
  , x_(0)
  , y_(0){}
struct UInitTruckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UInitTruckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UInitTruckDefaultTypeInternal() {}
  union {
    UInitTruck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UInitTruckDefaultTypeInternal _UInitTruck_default_instance_;
PROTOBUF_CONSTEXPR UConnect::UConnect(
    ::_pbi::ConstantInitialized)
  : trucks_()
  , worldid_(int64_t{0})
  , isamazon_(false){}
struct UConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UConnectDefaultTypeInternal() {}
  union {
    UConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UConnectDefaultTypeInternal _UConnect_default_instance_;
PROTOBUF_CONSTEXPR UConnected::UConnected(
    ::_pbi::ConstantInitialized)
  : result_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , worldid_(int64_t{0}){}
struct UConnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UConnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UConnectedDefaultTypeInternal() {}
  union {
    UConnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UConnectedDefaultTypeInternal _UConnected_default_instance_;
PROTOBUF_CONSTEXPR UGoPickup::UGoPickup(
    ::_pbi::ConstantInitialized)
  : truckid_(0)
  , whid_(0)
  , seqnum_(int64_t{0}){}
struct UGoPickupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGoPickupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGoPickupDefaultTypeInternal() {}
  union {
    UGoPickup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGoPickupDefaultTypeInternal _UGoPickup_default_instance_;
PROTOBUF_CONSTEXPR UFinished::UFinished(
    ::_pbi::ConstantInitialized)
  : status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , truckid_(0)
  , x_(0)
  , seqnum_(int64_t{0})
  , y_(0){}
struct UFinishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UFinishedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UFinishedDefaultTypeInternal() {}
  union {
    UFinished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UFinishedDefaultTypeInternal _UFinished_default_instance_;
PROTOBUF_CONSTEXPR UDeliveryMade::UDeliveryMade(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , seqnum_(int64_t{0})
  , truckid_(0){}
struct UDeliveryMadeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDeliveryMadeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDeliveryMadeDefaultTypeInternal() {}
  union {
    UDeliveryMade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDeliveryMadeDefaultTypeInternal _UDeliveryMade_default_instance_;
PROTOBUF_CONSTEXPR UDeliveryLocation::UDeliveryLocation(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , x_(0)
  , y_(0){}
struct UDeliveryLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDeliveryLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDeliveryLocationDefaultTypeInternal() {}
  union {
    UDeliveryLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDeliveryLocationDefaultTypeInternal _UDeliveryLocation_default_instance_;
PROTOBUF_CONSTEXPR UGoDeliver::UGoDeliver(
    ::_pbi::ConstantInitialized)
  : packages_()
  , seqnum_(int64_t{0})
  , truckid_(0){}
struct UGoDeliverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGoDeliverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGoDeliverDefaultTypeInternal() {}
  union {
    UGoDeliver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGoDeliverDefaultTypeInternal _UGoDeliver_default_instance_;
PROTOBUF_CONSTEXPR UErr::UErr(
    ::_pbi::ConstantInitialized)
  : err_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , originseqnum_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct UErrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UErrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UErrDefaultTypeInternal() {}
  union {
    UErr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UErrDefaultTypeInternal _UErr_default_instance_;
PROTOBUF_CONSTEXPR UQuery::UQuery(
    ::_pbi::ConstantInitialized)
  : seqnum_(int64_t{0})
  , truckid_(0){}
struct UQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UQueryDefaultTypeInternal() {}
  union {
    UQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UQueryDefaultTypeInternal _UQuery_default_instance_;
PROTOBUF_CONSTEXPR UTruck::UTruck(
    ::_pbi::ConstantInitialized)
  : status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , truckid_(0)
  , x_(0)
  , seqnum_(int64_t{0})
  , y_(0){}
struct UTruckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UTruckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UTruckDefaultTypeInternal() {}
  union {
    UTruck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UTruckDefaultTypeInternal _UTruck_default_instance_;
PROTOBUF_CONSTEXPR UCommands::UCommands(
    ::_pbi::ConstantInitialized)
  : pickups_()
  , deliveries_()
  , queries_()
  , acks_()
  , simspeed_(0u)
  , disconnect_(false){}
struct UCommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UCommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UCommandsDefaultTypeInternal() {}
  union {
    UCommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UCommandsDefaultTypeInternal _UCommands_default_instance_;
PROTOBUF_CONSTEXPR UResponses::UResponses(
    ::_pbi::ConstantInitialized)
  : completions_()
  , delivered_()
  , acks_()
  , truckstatus_()
  , error_()
  , finished_(false){}
struct UResponsesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UResponsesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UResponsesDefaultTypeInternal() {}
  union {
    UResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UResponsesDefaultTypeInternal _UResponses_default_instance_;
static ::_pb::Metadata file_level_metadata_ups_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ups_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ups_2eproto = nullptr;

const uint32_t TableStruct_ups_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::UInitTruck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UInitTruck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UInitTruck, id_),
  PROTOBUF_FIELD_OFFSET(::UInitTruck, x_),
  PROTOBUF_FIELD_OFFSET(::UInitTruck, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::UConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UConnect, worldid_),
  PROTOBUF_FIELD_OFFSET(::UConnect, trucks_),
  PROTOBUF_FIELD_OFFSET(::UConnect, isamazon_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::UConnected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UConnected, worldid_),
  PROTOBUF_FIELD_OFFSET(::UConnected, result_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::UGoPickup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UGoPickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UGoPickup, truckid_),
  PROTOBUF_FIELD_OFFSET(::UGoPickup, whid_),
  PROTOBUF_FIELD_OFFSET(::UGoPickup, seqnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::UFinished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UFinished, truckid_),
  PROTOBUF_FIELD_OFFSET(::UFinished, x_),
  PROTOBUF_FIELD_OFFSET(::UFinished, y_),
  PROTOBUF_FIELD_OFFSET(::UFinished, status_),
  PROTOBUF_FIELD_OFFSET(::UFinished, seqnum_),
  1,
  2,
  4,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::UDeliveryMade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UDeliveryMade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UDeliveryMade, truckid_),
  PROTOBUF_FIELD_OFFSET(::UDeliveryMade, packageid_),
  PROTOBUF_FIELD_OFFSET(::UDeliveryMade, seqnum_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UDeliveryLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UDeliveryLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UDeliveryLocation, packageid_),
  PROTOBUF_FIELD_OFFSET(::UDeliveryLocation, x_),
  PROTOBUF_FIELD_OFFSET(::UDeliveryLocation, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::UGoDeliver, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UGoDeliver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UGoDeliver, truckid_),
  PROTOBUF_FIELD_OFFSET(::UGoDeliver, packages_),
  PROTOBUF_FIELD_OFFSET(::UGoDeliver, seqnum_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::UErr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UErr, err_),
  PROTOBUF_FIELD_OFFSET(::UErr, originseqnum_),
  PROTOBUF_FIELD_OFFSET(::UErr, seqnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::UQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UQuery, truckid_),
  PROTOBUF_FIELD_OFFSET(::UQuery, seqnum_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::UTruck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UTruck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UTruck, truckid_),
  PROTOBUF_FIELD_OFFSET(::UTruck, status_),
  PROTOBUF_FIELD_OFFSET(::UTruck, x_),
  PROTOBUF_FIELD_OFFSET(::UTruck, y_),
  PROTOBUF_FIELD_OFFSET(::UTruck, seqnum_),
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::UCommands, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UCommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UCommands, pickups_),
  PROTOBUF_FIELD_OFFSET(::UCommands, deliveries_),
  PROTOBUF_FIELD_OFFSET(::UCommands, simspeed_),
  PROTOBUF_FIELD_OFFSET(::UCommands, disconnect_),
  PROTOBUF_FIELD_OFFSET(::UCommands, queries_),
  PROTOBUF_FIELD_OFFSET(::UCommands, acks_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::UResponses, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UResponses, completions_),
  PROTOBUF_FIELD_OFFSET(::UResponses, delivered_),
  PROTOBUF_FIELD_OFFSET(::UResponses, finished_),
  PROTOBUF_FIELD_OFFSET(::UResponses, acks_),
  PROTOBUF_FIELD_OFFSET(::UResponses, truckstatus_),
  PROTOBUF_FIELD_OFFSET(::UResponses, error_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::UInitTruck)},
  { 12, 21, -1, sizeof(::UConnect)},
  { 24, 32, -1, sizeof(::UConnected)},
  { 34, 43, -1, sizeof(::UGoPickup)},
  { 46, 57, -1, sizeof(::UFinished)},
  { 62, 71, -1, sizeof(::UDeliveryMade)},
  { 74, 83, -1, sizeof(::UDeliveryLocation)},
  { 86, 95, -1, sizeof(::UGoDeliver)},
  { 98, 107, -1, sizeof(::UErr)},
  { 110, 118, -1, sizeof(::UQuery)},
  { 120, 131, -1, sizeof(::UTruck)},
  { 136, 148, -1, sizeof(::UCommands)},
  { 154, 166, -1, sizeof(::UResponses)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_UInitTruck_default_instance_._instance,
  &::_UConnect_default_instance_._instance,
  &::_UConnected_default_instance_._instance,
  &::_UGoPickup_default_instance_._instance,
  &::_UFinished_default_instance_._instance,
  &::_UDeliveryMade_default_instance_._instance,
  &::_UDeliveryLocation_default_instance_._instance,
  &::_UGoDeliver_default_instance_._instance,
  &::_UErr_default_instance_._instance,
  &::_UQuery_default_instance_._instance,
  &::_UTruck_default_instance_._instance,
  &::_UCommands_default_instance_._instance,
  &::_UResponses_default_instance_._instance,
};

const char descriptor_table_protodef_ups_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tups.proto\".\n\nUInitTruck\022\n\n\002id\030\001 \002(\005\022\t\n"
  "\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\"J\n\010UConnect\022\017\n\007world"
  "id\030\001 \001(\003\022\033\n\006trucks\030\002 \003(\0132\013.UInitTruck\022\020\n"
  "\010isAmazon\030\003 \002(\010\"-\n\nUConnected\022\017\n\007worldid"
  "\030\001 \002(\003\022\016\n\006result\030\002 \002(\t\":\n\tUGoPickup\022\017\n\007t"
  "ruckid\030\001 \002(\005\022\014\n\004whid\030\002 \002(\005\022\016\n\006seqnum\030\003 \002"
  "(\003\"R\n\tUFinished\022\017\n\007truckid\030\001 \002(\005\022\t\n\001x\030\002 "
  "\002(\005\022\t\n\001y\030\003 \002(\005\022\016\n\006status\030\004 \002(\t\022\016\n\006seqnum"
  "\030\005 \002(\003\"C\n\rUDeliveryMade\022\017\n\007truckid\030\001 \002(\005"
  "\022\021\n\tpackageid\030\002 \002(\003\022\016\n\006seqnum\030\003 \002(\003\"<\n\021U"
  "DeliveryLocation\022\021\n\tpackageid\030\001 \002(\003\022\t\n\001x"
  "\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\"S\n\nUGoDeliver\022\017\n\007truck"
  "id\030\001 \002(\005\022$\n\010packages\030\002 \003(\0132\022.UDeliveryLo"
  "cation\022\016\n\006seqnum\030\003 \002(\003\"9\n\004UErr\022\013\n\003err\030\001 "
  "\002(\t\022\024\n\014originseqnum\030\002 \002(\003\022\016\n\006seqnum\030\003 \002("
  "\003\")\n\006UQuery\022\017\n\007truckid\030\001 \002(\005\022\016\n\006seqnum\030\002"
  " \002(\003\"O\n\006UTruck\022\017\n\007truckid\030\001 \002(\005\022\016\n\006statu"
  "s\030\002 \002(\t\022\t\n\001x\030\003 \002(\005\022\t\n\001y\030\004 \002(\005\022\016\n\006seqnum\030"
  "\005 \002(\003\"\227\001\n\tUCommands\022\033\n\007pickups\030\001 \003(\0132\n.U"
  "GoPickup\022\037\n\ndeliveries\030\002 \003(\0132\013.UGoDelive"
  "r\022\020\n\010simspeed\030\003 \001(\r\022\022\n\ndisconnect\030\004 \001(\010\022"
  "\030\n\007queries\030\005 \003(\0132\007.UQuery\022\014\n\004acks\030\006 \003(\003\""
  "\244\001\n\nUResponses\022\037\n\013completions\030\001 \003(\0132\n.UF"
  "inished\022!\n\tdelivered\030\002 \003(\0132\016.UDeliveryMa"
  "de\022\020\n\010finished\030\003 \001(\010\022\014\n\004acks\030\004 \003(\003\022\034\n\013tr"
  "uckstatus\030\005 \003(\0132\007.UTruck\022\024\n\005error\030\006 \003(\0132"
  "\005.UErr"
  ;
static ::_pbi::once_flag descriptor_table_ups_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ups_2eproto = {
    false, false, 1046, descriptor_table_protodef_ups_2eproto,
    "ups.proto",
    &descriptor_table_ups_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_ups_2eproto::offsets,
    file_level_metadata_ups_2eproto, file_level_enum_descriptors_ups_2eproto,
    file_level_service_descriptors_ups_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ups_2eproto_getter() {
  return &descriptor_table_ups_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ups_2eproto(&descriptor_table_ups_2eproto);

// ===================================================================

class UInitTruck::_Internal {
 public:
  using HasBits = decltype(std::declval<UInitTruck>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UInitTruck::UInitTruck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UInitTruck)
}
UInitTruck::UInitTruck(const UInitTruck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:UInitTruck)
}

inline void UInitTruck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
}

UInitTruck::~UInitTruck() {
  // @@protoc_insertion_point(destructor:UInitTruck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UInitTruck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UInitTruck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UInitTruck::Clear() {
// @@protoc_insertion_point(message_clear_start:UInitTruck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&id_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UInitTruck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UInitTruck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UInitTruck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UInitTruck)
  return target;
}

size_t UInitTruck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UInitTruck)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_x()) {
    // required int32 x = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return total_size;
}
size_t UInitTruck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UInitTruck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

    // required int32 x = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());

    // required int32 y = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UInitTruck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UInitTruck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UInitTruck::GetClassData() const { return &_class_data_; }

void UInitTruck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UInitTruck *>(to)->MergeFrom(
      static_cast<const UInitTruck &>(from));
}


void UInitTruck::MergeFrom(const UInitTruck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UInitTruck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UInitTruck::CopyFrom(const UInitTruck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UInitTruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInitTruck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UInitTruck::InternalSwap(UInitTruck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UInitTruck, y_)
      + sizeof(UInitTruck::y_)
      - PROTOBUF_FIELD_OFFSET(UInitTruck, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UInitTruck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[0]);
}

// ===================================================================

class UConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<UConnect>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isamazon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

UConnect::UConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trucks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UConnect)
}
UConnect::UConnect(const UConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trucks_(from.trucks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isamazon_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(isamazon_));
  // @@protoc_insertion_point(copy_constructor:UConnect)
}

inline void UConnect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worldid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isamazon_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(isamazon_));
}

UConnect::~UConnect() {
  // @@protoc_insertion_point(destructor:UConnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:UConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trucks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&worldid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isamazon_) -
        reinterpret_cast<char*>(&worldid_)) + sizeof(isamazon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UConnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .UInitTruck trucks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trucks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool isAmazon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_isamazon(&has_bits);
          isamazon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // repeated .UInitTruck trucks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trucks_size()); i < n; i++) {
    const auto& repfield = this->_internal_trucks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool isAmazon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isamazon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UConnect)
  return target;
}

size_t UConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UConnect)
  size_t total_size = 0;

  // required bool isAmazon = 3;
  if (_internal_has_isamazon()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UInitTruck trucks = 2;
  total_size += 1UL * this->_internal_trucks_size();
  for (const auto& msg : this->trucks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 worldid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UConnect::GetClassData() const { return &_class_data_; }

void UConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UConnect *>(to)->MergeFrom(
      static_cast<const UConnect &>(from));
}


void UConnect::MergeFrom(const UConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UConnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  trucks_.MergeFrom(from.trucks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      worldid_ = from.worldid_;
    }
    if (cached_has_bits & 0x00000002u) {
      isamazon_ = from.isamazon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UConnect::CopyFrom(const UConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UConnect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(trucks_))
    return false;
  return true;
}

void UConnect::InternalSwap(UConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trucks_.InternalSwap(&other->trucks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UConnect, isamazon_)
      + sizeof(UConnect::isamazon_)
      - PROTOBUF_FIELD_OFFSET(UConnect, worldid_)>(
          reinterpret_cast<char*>(&worldid_),
          reinterpret_cast<char*>(&other->worldid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UConnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[1]);
}

// ===================================================================

class UConnected::_Internal {
 public:
  using HasBits = decltype(std::declval<UConnected>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UConnected::UConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UConnected)
}
UConnected::UConnected(const UConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_result()) {
    result_.Set(from._internal_result(), 
      GetArenaForAllocation());
  }
  worldid_ = from.worldid_;
  // @@protoc_insertion_point(copy_constructor:UConnected)
}

inline void UConnected::SharedCtor() {
result_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
worldid_ = int64_t{0};
}

UConnected::~UConnected() {
  // @@protoc_insertion_point(destructor:UConnected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UConnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.Destroy();
}

void UConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:UConnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    result_.ClearNonDefaultToEmpty();
  }
  worldid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UConnected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "UConnected.result");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UConnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UConnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // required string result = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "UConnected.result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UConnected)
  return target;
}

size_t UConnected::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UConnected)
  size_t total_size = 0;

  if (_internal_has_result()) {
    // required string result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  if (_internal_has_worldid()) {
    // required int64 worldid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());
  }

  return total_size;
}
size_t UConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UConnected)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());

    // required int64 worldid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UConnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UConnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UConnected::GetClassData() const { return &_class_data_; }

void UConnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UConnected *>(to)->MergeFrom(
      static_cast<const UConnected &>(from));
}


void UConnected::MergeFrom(const UConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UConnected)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_result(from._internal_result());
    }
    if (cached_has_bits & 0x00000002u) {
      worldid_ = from.worldid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UConnected::CopyFrom(const UConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UConnected::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UConnected::InternalSwap(UConnected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UConnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[2]);
}

// ===================================================================

class UGoPickup::_Internal {
 public:
  using HasBits = decltype(std::declval<UGoPickup>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_whid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UGoPickup::UGoPickup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UGoPickup)
}
UGoPickup::UGoPickup(const UGoPickup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&truckid_, &from.truckid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UGoPickup)
}

inline void UGoPickup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&truckid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
}

UGoPickup::~UGoPickup() {
  // @@protoc_insertion_point(destructor:UGoPickup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGoPickup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGoPickup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UGoPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:UGoPickup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&truckid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGoPickup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 whid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_whid(&has_bits);
          whid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGoPickup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UGoPickup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // required int32 whid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_whid(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UGoPickup)
  return target;
}

size_t UGoPickup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UGoPickup)
  size_t total_size = 0;

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  if (_internal_has_whid()) {
    // required int32 whid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UGoPickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UGoPickup)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

    // required int32 whid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whid());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGoPickup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UGoPickup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGoPickup::GetClassData() const { return &_class_data_; }

void UGoPickup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UGoPickup *>(to)->MergeFrom(
      static_cast<const UGoPickup &>(from));
}


void UGoPickup::MergeFrom(const UGoPickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UGoPickup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000002u) {
      whid_ = from.whid_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGoPickup::CopyFrom(const UGoPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UGoPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGoPickup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UGoPickup::InternalSwap(UGoPickup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGoPickup, seqnum_)
      + sizeof(UGoPickup::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UGoPickup, truckid_)>(
          reinterpret_cast<char*>(&truckid_),
          reinterpret_cast<char*>(&other->truckid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGoPickup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[3]);
}

// ===================================================================

class UFinished::_Internal {
 public:
  using HasBits = decltype(std::declval<UFinished>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

UFinished::UFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UFinished)
}
UFinished::UFinished(const UFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  ::memcpy(&truckid_, &from.truckid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:UFinished)
}

inline void UFinished::SharedCtor() {
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&truckid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
}

UFinished::~UFinished() {
  // @@protoc_insertion_point(destructor:UFinished)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UFinished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.Destroy();
}

void UFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:UFinished)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&truckid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UFinished::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "UFinished.status");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UFinished::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UFinished)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // required string status = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "UFinished.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // required int64 seqnum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UFinished)
  return target;
}

size_t UFinished::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UFinished)
  size_t total_size = 0;

  if (_internal_has_status()) {
    // required string status = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  if (_internal_has_x()) {
    // required int32 x = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_y()) {
    // required int32 y = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return total_size;
}
size_t UFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UFinished)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string status = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());

    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

    // required int32 x = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());

    // required int64 seqnum = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 y = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UFinished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UFinished::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UFinished::GetClassData() const { return &_class_data_; }

void UFinished::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UFinished *>(to)->MergeFrom(
      static_cast<const UFinished &>(from));
}


void UFinished::MergeFrom(const UFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UFinished)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UFinished::CopyFrom(const UFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UFinished::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UFinished::InternalSwap(UFinished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UFinished, y_)
      + sizeof(UFinished::y_)
      - PROTOBUF_FIELD_OFFSET(UFinished, truckid_)>(
          reinterpret_cast<char*>(&truckid_),
          reinterpret_cast<char*>(&other->truckid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UFinished::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[4]);
}

// ===================================================================

class UDeliveryMade::_Internal {
 public:
  using HasBits = decltype(std::declval<UDeliveryMade>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UDeliveryMade::UDeliveryMade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UDeliveryMade)
}
UDeliveryMade::UDeliveryMade(const UDeliveryMade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:UDeliveryMade)
}

inline void UDeliveryMade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
}

UDeliveryMade::~UDeliveryMade() {
  // @@protoc_insertion_point(destructor:UDeliveryMade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDeliveryMade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UDeliveryMade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UDeliveryMade::Clear() {
// @@protoc_insertion_point(message_clear_start:UDeliveryMade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDeliveryMade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 packageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDeliveryMade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UDeliveryMade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // required int64 packageid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_packageid(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UDeliveryMade)
  return target;
}

size_t UDeliveryMade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UDeliveryMade)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  return total_size;
}
size_t UDeliveryMade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UDeliveryMade)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 packageid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDeliveryMade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UDeliveryMade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDeliveryMade::GetClassData() const { return &_class_data_; }

void UDeliveryMade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UDeliveryMade *>(to)->MergeFrom(
      static_cast<const UDeliveryMade &>(from));
}


void UDeliveryMade::MergeFrom(const UDeliveryMade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UDeliveryMade)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDeliveryMade::CopyFrom(const UDeliveryMade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UDeliveryMade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDeliveryMade::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UDeliveryMade::InternalSwap(UDeliveryMade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UDeliveryMade, truckid_)
      + sizeof(UDeliveryMade::truckid_)
      - PROTOBUF_FIELD_OFFSET(UDeliveryMade, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UDeliveryMade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[5]);
}

// ===================================================================

class UDeliveryLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<UDeliveryLocation>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UDeliveryLocation::UDeliveryLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UDeliveryLocation)
}
UDeliveryLocation::UDeliveryLocation(const UDeliveryLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:UDeliveryLocation)
}

inline void UDeliveryLocation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(y_));
}

UDeliveryLocation::~UDeliveryLocation() {
  // @@protoc_insertion_point(destructor:UDeliveryLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDeliveryLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UDeliveryLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UDeliveryLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:UDeliveryLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDeliveryLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDeliveryLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UDeliveryLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UDeliveryLocation)
  return target;
}

size_t UDeliveryLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UDeliveryLocation)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_x()) {
    // required int32 x = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return total_size;
}
size_t UDeliveryLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UDeliveryLocation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int32 x = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());

    // required int32 y = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDeliveryLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UDeliveryLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDeliveryLocation::GetClassData() const { return &_class_data_; }

void UDeliveryLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UDeliveryLocation *>(to)->MergeFrom(
      static_cast<const UDeliveryLocation &>(from));
}


void UDeliveryLocation::MergeFrom(const UDeliveryLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UDeliveryLocation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDeliveryLocation::CopyFrom(const UDeliveryLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UDeliveryLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDeliveryLocation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UDeliveryLocation::InternalSwap(UDeliveryLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UDeliveryLocation, y_)
      + sizeof(UDeliveryLocation::y_)
      - PROTOBUF_FIELD_OFFSET(UDeliveryLocation, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UDeliveryLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[6]);
}

// ===================================================================

class UGoDeliver::_Internal {
 public:
  using HasBits = decltype(std::declval<UGoDeliver>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UGoDeliver::UGoDeliver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packages_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UGoDeliver)
}
UGoDeliver::UGoDeliver(const UGoDeliver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      packages_(from.packages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:UGoDeliver)
}

inline void UGoDeliver::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
}

UGoDeliver::~UGoDeliver() {
  // @@protoc_insertion_point(destructor:UGoDeliver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGoDeliver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGoDeliver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UGoDeliver::Clear() {
// @@protoc_insertion_point(message_clear_start:UGoDeliver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGoDeliver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .UDeliveryLocation packages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGoDeliver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UGoDeliver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // repeated .UDeliveryLocation packages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packages_size()); i < n; i++) {
    const auto& repfield = this->_internal_packages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UGoDeliver)
  return target;
}

size_t UGoDeliver::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UGoDeliver)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  return total_size;
}
size_t UGoDeliver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UGoDeliver)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UDeliveryLocation packages = 2;
  total_size += 1UL * this->_internal_packages_size();
  for (const auto& msg : this->packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGoDeliver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UGoDeliver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGoDeliver::GetClassData() const { return &_class_data_; }

void UGoDeliver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UGoDeliver *>(to)->MergeFrom(
      static_cast<const UGoDeliver &>(from));
}


void UGoDeliver::MergeFrom(const UGoDeliver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UGoDeliver)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGoDeliver::CopyFrom(const UGoDeliver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UGoDeliver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGoDeliver::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(packages_))
    return false;
  return true;
}

void UGoDeliver::InternalSwap(UGoDeliver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packages_.InternalSwap(&other->packages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGoDeliver, truckid_)
      + sizeof(UGoDeliver::truckid_)
      - PROTOBUF_FIELD_OFFSET(UGoDeliver, seqnum_)>(
          reinterpret_cast<char*>(&seqnum_),
          reinterpret_cast<char*>(&other->seqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGoDeliver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[7]);
}

// ===================================================================

class UErr::_Internal {
 public:
  using HasBits = decltype(std::declval<UErr>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_originseqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UErr::UErr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UErr)
}
UErr::UErr(const UErr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_err()) {
    err_.Set(from._internal_err(), 
      GetArenaForAllocation());
  }
  ::memcpy(&originseqnum_, &from.originseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UErr)
}

inline void UErr::SharedCtor() {
err_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&originseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
}

UErr::~UErr() {
  // @@protoc_insertion_point(destructor:UErr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UErr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_.Destroy();
}

void UErr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UErr::Clear() {
// @@protoc_insertion_point(message_clear_start:UErr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    err_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&originseqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UErr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "UErr.err");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 originseqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_originseqnum(&has_bits);
          originseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UErr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UErr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string err = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "UErr.err");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_err(), target);
  }

  // required int64 originseqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_originseqnum(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UErr)
  return target;
}

size_t UErr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UErr)
  size_t total_size = 0;

  if (_internal_has_err()) {
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());
  }

  if (_internal_has_originseqnum()) {
    // required int64 originseqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originseqnum());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UErr)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());

    // required int64 originseqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originseqnum());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UErr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UErr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UErr::GetClassData() const { return &_class_data_; }

void UErr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UErr *>(to)->MergeFrom(
      static_cast<const UErr &>(from));
}


void UErr::MergeFrom(const UErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UErr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_err(from._internal_err());
    }
    if (cached_has_bits & 0x00000002u) {
      originseqnum_ = from.originseqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UErr::CopyFrom(const UErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UErr::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UErr::InternalSwap(UErr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &err_, lhs_arena,
      &other->err_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UErr, seqnum_)
      + sizeof(UErr::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UErr, originseqnum_)>(
          reinterpret_cast<char*>(&originseqnum_),
          reinterpret_cast<char*>(&other->originseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UErr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[8]);
}

// ===================================================================

class UQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<UQuery>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UQuery::UQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UQuery)
}
UQuery::UQuery(const UQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:UQuery)
}

inline void UQuery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
}

UQuery::~UQuery() {
  // @@protoc_insertion_point(destructor:UQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:UQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UQuery)
  return target;
}

size_t UQuery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UQuery)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  return total_size;
}
size_t UQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UQuery)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UQuery::GetClassData() const { return &_class_data_; }

void UQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UQuery *>(to)->MergeFrom(
      static_cast<const UQuery &>(from));
}


void UQuery::MergeFrom(const UQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UQuery::CopyFrom(const UQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UQuery::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UQuery::InternalSwap(UQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UQuery, truckid_)
      + sizeof(UQuery::truckid_)
      - PROTOBUF_FIELD_OFFSET(UQuery, seqnum_)>(
          reinterpret_cast<char*>(&seqnum_),
          reinterpret_cast<char*>(&other->seqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[9]);
}

// ===================================================================

class UTruck::_Internal {
 public:
  using HasBits = decltype(std::declval<UTruck>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

UTruck::UTruck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UTruck)
}
UTruck::UTruck(const UTruck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  ::memcpy(&truckid_, &from.truckid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:UTruck)
}

inline void UTruck::SharedCtor() {
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&truckid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
}

UTruck::~UTruck() {
  // @@protoc_insertion_point(destructor:UTruck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UTruck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.Destroy();
}

void UTruck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UTruck::Clear() {
// @@protoc_insertion_point(message_clear_start:UTruck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&truckid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UTruck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "UTruck.status");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTruck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UTruck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // required string status = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "UTruck.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // required int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // required int32 y = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // required int64 seqnum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UTruck)
  return target;
}

size_t UTruck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UTruck)
  size_t total_size = 0;

  if (_internal_has_status()) {
    // required string status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  if (_internal_has_x()) {
    // required int32 x = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_y()) {
    // required int32 y = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return total_size;
}
size_t UTruck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UTruck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());

    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

    // required int32 x = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());

    // required int64 seqnum = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 y = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UTruck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UTruck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UTruck::GetClassData() const { return &_class_data_; }

void UTruck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UTruck *>(to)->MergeFrom(
      static_cast<const UTruck &>(from));
}


void UTruck::MergeFrom(const UTruck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UTruck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UTruck::CopyFrom(const UTruck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UTruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTruck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UTruck::InternalSwap(UTruck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UTruck, y_)
      + sizeof(UTruck::y_)
      - PROTOBUF_FIELD_OFFSET(UTruck, truckid_)>(
          reinterpret_cast<char*>(&truckid_),
          reinterpret_cast<char*>(&other->truckid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UTruck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[10]);
}

// ===================================================================

class UCommands::_Internal {
 public:
  using HasBits = decltype(std::declval<UCommands>()._has_bits_);
  static void set_has_simspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disconnect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UCommands::UCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pickups_(arena),
  deliveries_(arena),
  queries_(arena),
  acks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UCommands)
}
UCommands::UCommands(const UCommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pickups_(from.pickups_),
      deliveries_(from.deliveries_),
      queries_(from.queries_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&simspeed_, &from.simspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnect_) -
    reinterpret_cast<char*>(&simspeed_)) + sizeof(disconnect_));
  // @@protoc_insertion_point(copy_constructor:UCommands)
}

inline void UCommands::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&simspeed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disconnect_) -
    reinterpret_cast<char*>(&simspeed_)) + sizeof(disconnect_));
}

UCommands::~UCommands() {
  // @@protoc_insertion_point(destructor:UCommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UCommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UCommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:UCommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pickups_.Clear();
  deliveries_.Clear();
  queries_.Clear();
  acks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&simspeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disconnect_) -
        reinterpret_cast<char*>(&simspeed_)) + sizeof(disconnect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UCommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UGoPickup pickups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pickups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UGoDeliver deliveries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deliveries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 simspeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_simspeed(&has_bits);
          simspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disconnect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_disconnect(&has_bits);
          disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .UQuery queries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UCommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UCommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UGoPickup pickups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pickups_size()); i < n; i++) {
    const auto& repfield = this->_internal_pickups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UGoDeliver deliveries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deliveries_size()); i < n; i++) {
    const auto& repfield = this->_internal_deliveries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 simspeed = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_simspeed(), target);
  }

  // optional bool disconnect = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_disconnect(), target);
  }

  // repeated .UQuery queries = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queries_size()); i < n; i++) {
    const auto& repfield = this->_internal_queries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 6;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_acks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UCommands)
  return target;
}

size_t UCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UCommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UGoPickup pickups = 1;
  total_size += 1UL * this->_internal_pickups_size();
  for (const auto& msg : this->pickups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UGoDeliver deliveries = 2;
  total_size += 1UL * this->_internal_deliveries_size();
  for (const auto& msg : this->deliveries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UQuery queries = 5;
  total_size += 1UL * this->_internal_queries_size();
  for (const auto& msg : this->queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 simspeed = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_simspeed());
    }

    // optional bool disconnect = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UCommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UCommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UCommands::GetClassData() const { return &_class_data_; }

void UCommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UCommands *>(to)->MergeFrom(
      static_cast<const UCommands &>(from));
}


void UCommands::MergeFrom(const UCommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UCommands)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pickups_.MergeFrom(from.pickups_);
  deliveries_.MergeFrom(from.deliveries_);
  queries_.MergeFrom(from.queries_);
  acks_.MergeFrom(from.acks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      simspeed_ = from.simspeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      disconnect_ = from.disconnect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UCommands::CopyFrom(const UCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UCommands::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pickups_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(deliveries_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(queries_))
    return false;
  return true;
}

void UCommands::InternalSwap(UCommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pickups_.InternalSwap(&other->pickups_);
  deliveries_.InternalSwap(&other->deliveries_);
  queries_.InternalSwap(&other->queries_);
  acks_.InternalSwap(&other->acks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UCommands, disconnect_)
      + sizeof(UCommands::disconnect_)
      - PROTOBUF_FIELD_OFFSET(UCommands, simspeed_)>(
          reinterpret_cast<char*>(&simspeed_),
          reinterpret_cast<char*>(&other->simspeed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UCommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[11]);
}

// ===================================================================

class UResponses::_Internal {
 public:
  using HasBits = decltype(std::declval<UResponses>()._has_bits_);
  static void set_has_finished(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UResponses::UResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  completions_(arena),
  delivered_(arena),
  acks_(arena),
  truckstatus_(arena),
  error_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UResponses)
}
UResponses::UResponses(const UResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      completions_(from.completions_),
      delivered_(from.delivered_),
      acks_(from.acks_),
      truckstatus_(from.truckstatus_),
      error_(from.error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  finished_ = from.finished_;
  // @@protoc_insertion_point(copy_constructor:UResponses)
}

inline void UResponses::SharedCtor() {
finished_ = false;
}

UResponses::~UResponses() {
  // @@protoc_insertion_point(destructor:UResponses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:UResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  completions_.Clear();
  delivered_.Clear();
  acks_.Clear();
  truckstatus_.Clear();
  error_.Clear();
  finished_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UResponses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UFinished completions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_completions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UDeliveryMade delivered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delivered(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool finished = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_finished(&has_bits);
          finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .UTruck truckstatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_truckstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UErr error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UFinished completions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_completions_size()); i < n; i++) {
    const auto& repfield = this->_internal_completions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UDeliveryMade delivered = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delivered_size()); i < n; i++) {
    const auto& repfield = this->_internal_delivered(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool finished = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_finished(), target);
  }

  // repeated int64 acks = 4;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_acks(i), target);
  }

  // repeated .UTruck truckstatus = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_truckstatus_size()); i < n; i++) {
    const auto& repfield = this->_internal_truckstatus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UErr error = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_size()); i < n; i++) {
    const auto& repfield = this->_internal_error(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UResponses)
  return target;
}

size_t UResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UFinished completions = 1;
  total_size += 1UL * this->_internal_completions_size();
  for (const auto& msg : this->completions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UDeliveryMade delivered = 2;
  total_size += 1UL * this->_internal_delivered_size();
  for (const auto& msg : this->delivered_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  // repeated .UTruck truckstatus = 5;
  total_size += 1UL * this->_internal_truckstatus_size();
  for (const auto& msg : this->truckstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UErr error = 6;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool finished = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UResponses::GetClassData() const { return &_class_data_; }

void UResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UResponses *>(to)->MergeFrom(
      static_cast<const UResponses &>(from));
}


void UResponses::MergeFrom(const UResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UResponses)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  completions_.MergeFrom(from.completions_);
  delivered_.MergeFrom(from.delivered_);
  acks_.MergeFrom(from.acks_);
  truckstatus_.MergeFrom(from.truckstatus_);
  error_.MergeFrom(from.error_);
  if (from._internal_has_finished()) {
    _internal_set_finished(from._internal_finished());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UResponses::CopyFrom(const UResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UResponses::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(completions_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delivered_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(truckstatus_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_))
    return false;
  return true;
}

void UResponses::InternalSwap(UResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  completions_.InternalSwap(&other->completions_);
  delivered_.InternalSwap(&other->delivered_);
  acks_.InternalSwap(&other->acks_);
  truckstatus_.InternalSwap(&other->truckstatus_);
  error_.InternalSwap(&other->error_);
  swap(finished_, other->finished_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UResponses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2eproto_getter, &descriptor_table_ups_2eproto_once,
      file_level_metadata_ups_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UInitTruck*
Arena::CreateMaybeMessage< ::UInitTruck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UInitTruck >(arena);
}
template<> PROTOBUF_NOINLINE ::UConnect*
Arena::CreateMaybeMessage< ::UConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::UConnected*
Arena::CreateMaybeMessage< ::UConnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::UGoPickup*
Arena::CreateMaybeMessage< ::UGoPickup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UGoPickup >(arena);
}
template<> PROTOBUF_NOINLINE ::UFinished*
Arena::CreateMaybeMessage< ::UFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::UDeliveryMade*
Arena::CreateMaybeMessage< ::UDeliveryMade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UDeliveryMade >(arena);
}
template<> PROTOBUF_NOINLINE ::UDeliveryLocation*
Arena::CreateMaybeMessage< ::UDeliveryLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UDeliveryLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::UGoDeliver*
Arena::CreateMaybeMessage< ::UGoDeliver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UGoDeliver >(arena);
}
template<> PROTOBUF_NOINLINE ::UErr*
Arena::CreateMaybeMessage< ::UErr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UErr >(arena);
}
template<> PROTOBUF_NOINLINE ::UQuery*
Arena::CreateMaybeMessage< ::UQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::UTruck*
Arena::CreateMaybeMessage< ::UTruck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UTruck >(arena);
}
template<> PROTOBUF_NOINLINE ::UCommands*
Arena::CreateMaybeMessage< ::UCommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UCommands >(arena);
}
template<> PROTOBUF_NOINLINE ::UResponses*
Arena::CreateMaybeMessage< ::UResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UResponses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
