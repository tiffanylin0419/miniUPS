// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups-amazon.proto

#include "ups-amazon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR AUInitConnect::AUInitConnect(
    ::_pbi::ConstantInitialized)
  : worldid_(int64_t{0}){}
struct AUInitConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUInitConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUInitConnectDefaultTypeInternal() {}
  union {
    AUInitConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUInitConnectDefaultTypeInternal _AUInitConnect_default_instance_;
PROTOBUF_CONSTEXPR UAConfirmConnected::UAConfirmConnected(
    ::_pbi::ConstantInitialized)
  : worldid_(int64_t{0})
  , connected_(false){}
struct UAConfirmConnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAConfirmConnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAConfirmConnectedDefaultTypeInternal() {}
  union {
    UAConfirmConnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAConfirmConnectedDefaultTypeInternal _UAConfirmConnected_default_instance_;
PROTOBUF_CONSTEXPR AUInitPickUp::AUInitPickUp(
    ::_pbi::ConstantInitialized)
  : product_()
  , accountname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , deliverylocation_(nullptr)
  , seqnum_(int64_t{0})
  , whid_(0){}
struct AUInitPickUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUInitPickUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUInitPickUpDefaultTypeInternal() {}
  union {
    AUInitPickUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUInitPickUpDefaultTypeInternal _AUInitPickUp_default_instance_;
PROTOBUF_CONSTEXPR UATruckArrived::UATruckArrived(
    ::_pbi::ConstantInitialized)
  : shipid_(int64_t{0})
  , seqnum_(int64_t{0})
  , truckid_(0){}
struct UATruckArrivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UATruckArrivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UATruckArrivedDefaultTypeInternal() {}
  union {
    UATruckArrived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UATruckArrivedDefaultTypeInternal _UATruckArrived_default_instance_;
PROTOBUF_CONSTEXPR AULoaded::AULoaded(
    ::_pbi::ConstantInitialized)
  : shipid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct AULoadedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AULoadedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AULoadedDefaultTypeInternal() {}
  union {
    AULoaded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AULoadedDefaultTypeInternal _AULoaded_default_instance_;
PROTOBUF_CONSTEXPR UADelivered::UADelivered(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , seqnum_(int64_t{0})
  , truckid_(0){}
struct UADeliveredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UADeliveredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UADeliveredDefaultTypeInternal() {}
  union {
    UADelivered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UADeliveredDefaultTypeInternal _UADelivered_default_instance_;
PROTOBUF_CONSTEXPR UADelievering::UADelievering(
    ::_pbi::ConstantInitialized)
  : packageid_()
  , seqnum_(int64_t{0}){}
struct UADelieveringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UADelieveringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UADelieveringDefaultTypeInternal() {}
  union {
    UADelievering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UADelieveringDefaultTypeInternal _UADelievering_default_instance_;
PROTOBUF_CONSTEXPR UATruck::UATruck(
    ::_pbi::ConstantInitialized)
  : status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , truckid_(0)
  , x_(0)
  , seqnum_(int64_t{0})
  , y_(0){}
struct UATruckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UATruckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UATruckDefaultTypeInternal() {}
  union {
    UATruck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UATruckDefaultTypeInternal _UATruck_default_instance_;
PROTOBUF_CONSTEXPR AUProduct::AUProduct(
    ::_pbi::ConstantInitialized)
  : description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(int64_t{0})
  , count_(0){}
struct AUProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUProductDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUProductDefaultTypeInternal() {}
  union {
    AUProduct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUProductDefaultTypeInternal _AUProduct_default_instance_;
PROTOBUF_CONSTEXPR UAPackageRequest::UAPackageRequest(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct UAPackageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAPackageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAPackageRequestDefaultTypeInternal() {}
  union {
    UAPackageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAPackageRequestDefaultTypeInternal _UAPackageRequest_default_instance_;
PROTOBUF_CONSTEXPR AUDeliveryLocation::AUDeliveryLocation(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , x_(0)
  , y_(0){}
struct AUDeliveryLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUDeliveryLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUDeliveryLocationDefaultTypeInternal() {}
  union {
    AUDeliveryLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUDeliveryLocationDefaultTypeInternal _AUDeliveryLocation_default_instance_;
PROTOBUF_CONSTEXPR AUPackageResponse::AUPackageResponse(
    ::_pbi::ConstantInitialized)
  : deliverylocation_(nullptr)
  , product_(nullptr)
  , seqnum_(int64_t{0}){}
struct AUPackageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUPackageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUPackageResponseDefaultTypeInternal() {}
  union {
    AUPackageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUPackageResponseDefaultTypeInternal _AUPackageResponse_default_instance_;
PROTOBUF_CONSTEXPR AUCommands::AUCommands(
    ::_pbi::ConstantInitialized)
  : pickupreq_()
  , loaded_()
  , acks_(){}
struct AUCommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUCommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUCommandsDefaultTypeInternal() {}
  union {
    AUCommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUCommandsDefaultTypeInternal _AUCommands_default_instance_;
PROTOBUF_CONSTEXPR UACommands::UACommands(
    ::_pbi::ConstantInitialized)
  : truckarrived_()
  , delivered_()
  , trucks_()
  , acks_(){}
struct UACommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UACommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UACommandsDefaultTypeInternal() {}
  union {
    UACommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UACommandsDefaultTypeInternal _UACommands_default_instance_;
static ::_pb::Metadata file_level_metadata_ups_2damazon_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ups_2damazon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ups_2damazon_2eproto = nullptr;

const uint32_t TableStruct_ups_2damazon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AUInitConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUInitConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUInitConnect, worldid_),
  0,
  PROTOBUF_FIELD_OFFSET(::UAConfirmConnected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAConfirmConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAConfirmConnected, worldid_),
  PROTOBUF_FIELD_OFFSET(::UAConfirmConnected, connected_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AUInitPickUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUInitPickUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUInitPickUp, whid_),
  PROTOBUF_FIELD_OFFSET(::AUInitPickUp, seqnum_),
  PROTOBUF_FIELD_OFFSET(::AUInitPickUp, accountname_),
  PROTOBUF_FIELD_OFFSET(::AUInitPickUp, deliverylocation_),
  PROTOBUF_FIELD_OFFSET(::AUInitPickUp, product_),
  3,
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::UATruckArrived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UATruckArrived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UATruckArrived, truckid_),
  PROTOBUF_FIELD_OFFSET(::UATruckArrived, shipid_),
  PROTOBUF_FIELD_OFFSET(::UATruckArrived, seqnum_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AULoaded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AULoaded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AULoaded, shipid_),
  PROTOBUF_FIELD_OFFSET(::AULoaded, seqnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UADelivered, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UADelivered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UADelivered, truckid_),
  PROTOBUF_FIELD_OFFSET(::UADelivered, packageid_),
  PROTOBUF_FIELD_OFFSET(::UADelivered, seqnum_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UADelievering, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UADelievering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UADelievering, packageid_),
  PROTOBUF_FIELD_OFFSET(::UADelievering, seqnum_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::UATruck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UATruck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UATruck, truckid_),
  PROTOBUF_FIELD_OFFSET(::UATruck, status_),
  PROTOBUF_FIELD_OFFSET(::UATruck, x_),
  PROTOBUF_FIELD_OFFSET(::UATruck, y_),
  PROTOBUF_FIELD_OFFSET(::UATruck, seqnum_),
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::AUProduct, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUProduct, id_),
  PROTOBUF_FIELD_OFFSET(::AUProduct, description_),
  PROTOBUF_FIELD_OFFSET(::AUProduct, count_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::UAPackageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAPackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAPackageRequest, packageid_),
  PROTOBUF_FIELD_OFFSET(::UAPackageRequest, seqnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AUDeliveryLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUDeliveryLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUDeliveryLocation, packageid_),
  PROTOBUF_FIELD_OFFSET(::AUDeliveryLocation, x_),
  PROTOBUF_FIELD_OFFSET(::AUDeliveryLocation, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::AUPackageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUPackageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUPackageResponse, deliverylocation_),
  PROTOBUF_FIELD_OFFSET(::AUPackageResponse, product_),
  PROTOBUF_FIELD_OFFSET(::AUPackageResponse, seqnum_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AUCommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUCommands, pickupreq_),
  PROTOBUF_FIELD_OFFSET(::AUCommands, loaded_),
  PROTOBUF_FIELD_OFFSET(::AUCommands, acks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UACommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UACommands, truckarrived_),
  PROTOBUF_FIELD_OFFSET(::UACommands, delivered_),
  PROTOBUF_FIELD_OFFSET(::UACommands, trucks_),
  PROTOBUF_FIELD_OFFSET(::UACommands, acks_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::AUInitConnect)},
  { 8, 16, -1, sizeof(::UAConfirmConnected)},
  { 18, 29, -1, sizeof(::AUInitPickUp)},
  { 34, 43, -1, sizeof(::UATruckArrived)},
  { 46, 54, -1, sizeof(::AULoaded)},
  { 56, 65, -1, sizeof(::UADelivered)},
  { 68, 76, -1, sizeof(::UADelievering)},
  { 78, 89, -1, sizeof(::UATruck)},
  { 94, 103, -1, sizeof(::AUProduct)},
  { 106, 114, -1, sizeof(::UAPackageRequest)},
  { 116, 125, -1, sizeof(::AUDeliveryLocation)},
  { 128, 137, -1, sizeof(::AUPackageResponse)},
  { 140, -1, -1, sizeof(::AUCommands)},
  { 149, -1, -1, sizeof(::UACommands)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_AUInitConnect_default_instance_._instance,
  &::_UAConfirmConnected_default_instance_._instance,
  &::_AUInitPickUp_default_instance_._instance,
  &::_UATruckArrived_default_instance_._instance,
  &::_AULoaded_default_instance_._instance,
  &::_UADelivered_default_instance_._instance,
  &::_UADelievering_default_instance_._instance,
  &::_UATruck_default_instance_._instance,
  &::_AUProduct_default_instance_._instance,
  &::_UAPackageRequest_default_instance_._instance,
  &::_AUDeliveryLocation_default_instance_._instance,
  &::_AUPackageResponse_default_instance_._instance,
  &::_AUCommands_default_instance_._instance,
  &::_UACommands_default_instance_._instance,
};

const char descriptor_table_protodef_ups_2damazon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ups-amazon.proto\" \n\rAUInitConnect\022\017\n\007w"
  "orldid\030\001 \002(\003\"8\n\022UAConfirmConnected\022\017\n\007wo"
  "rldid\030\001 \002(\003\022\021\n\tconnected\030\002 \002(\010\"\215\001\n\014AUIni"
  "tPickUp\022\014\n\004whid\030\001 \002(\005\022\016\n\006seqnum\030\002 \002(\003\022\023\n"
  "\013accountname\030\003 \002(\t\022-\n\020deliverylocation\030\004"
  " \002(\0132\023.AUDeliveryLocation\022\033\n\007product\030\005 \003"
  "(\0132\n.AUProduct\"A\n\016UATruckArrived\022\017\n\007truc"
  "kid\030\001 \002(\005\022\016\n\006shipid\030\002 \002(\003\022\016\n\006seqnum\030\003 \002("
  "\003\"*\n\010AULoaded\022\016\n\006shipid\030\001 \002(\003\022\016\n\006seqnum\030"
  "\002 \002(\003\"A\n\013UADelivered\022\017\n\007truckid\030\001 \002(\005\022\021\n"
  "\tpackageid\030\002 \002(\003\022\016\n\006seqnum\030\003 \002(\003\"2\n\rUADe"
  "lievering\022\021\n\tpackageid\030\001 \003(\003\022\016\n\006seqnum\030\002"
  " \002(\003\"P\n\007UATruck\022\017\n\007truckid\030\001 \002(\005\022\016\n\006stat"
  "us\030\002 \002(\t\022\t\n\001x\030\003 \002(\005\022\t\n\001y\030\004 \002(\005\022\016\n\006seqnum"
  "\030\005 \002(\003\";\n\tAUProduct\022\n\n\002id\030\001 \002(\003\022\023\n\013descr"
  "iption\030\002 \002(\t\022\r\n\005count\030\003 \002(\005\"5\n\020UAPackage"
  "Request\022\021\n\tpackageid\030\001 \002(\003\022\016\n\006seqnum\030\002 \002"
  "(\003\"=\n\022AUDeliveryLocation\022\021\n\tpackageid\030\001 "
  "\002(\003\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\"o\n\021AUPackageRe"
  "sponse\022-\n\020deliverylocation\030\001 \002(\0132\023.AUDel"
  "iveryLocation\022\033\n\007product\030\002 \002(\0132\n.AUProdu"
  "ct\022\016\n\006seqnum\030\003 \002(\003\"W\n\nAUCommands\022 \n\tpick"
  "upreq\030\001 \003(\0132\r.AUInitPickUp\022\031\n\006loaded\030\002 \003"
  "(\0132\t.AULoaded\022\014\n\004acks\030\003 \003(\003\"|\n\nUACommand"
  "s\022%\n\014truckarrived\030\001 \003(\0132\017.UATruckArrived"
  "\022\037\n\tdelivered\030\002 \003(\0132\014.UADelivered\022\030\n\006tru"
  "cks\030\003 \003(\0132\010.UATruck\022\014\n\004acks\030\004 \003(\003"
  ;
static ::_pbi::once_flag descriptor_table_ups_2damazon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ups_2damazon_2eproto = {
    false, false, 1073, descriptor_table_protodef_ups_2damazon_2eproto,
    "ups-amazon.proto",
    &descriptor_table_ups_2damazon_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_ups_2damazon_2eproto::offsets,
    file_level_metadata_ups_2damazon_2eproto, file_level_enum_descriptors_ups_2damazon_2eproto,
    file_level_service_descriptors_ups_2damazon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ups_2damazon_2eproto_getter() {
  return &descriptor_table_ups_2damazon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ups_2damazon_2eproto(&descriptor_table_ups_2damazon_2eproto);

// ===================================================================

class AUInitConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<AUInitConnect>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AUInitConnect::AUInitConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUInitConnect)
}
AUInitConnect::AUInitConnect(const AUInitConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldid_ = from.worldid_;
  // @@protoc_insertion_point(copy_constructor:AUInitConnect)
}

inline void AUInitConnect::SharedCtor() {
worldid_ = int64_t{0};
}

AUInitConnect::~AUInitConnect() {
  // @@protoc_insertion_point(destructor:AUInitConnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUInitConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUInitConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUInitConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:AUInitConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUInitConnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUInitConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUInitConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUInitConnect)
  return target;
}

size_t AUInitConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUInitConnect)
  size_t total_size = 0;

  // required int64 worldid = 1;
  if (_internal_has_worldid()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUInitConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUInitConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUInitConnect::GetClassData() const { return &_class_data_; }

void AUInitConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUInitConnect *>(to)->MergeFrom(
      static_cast<const AUInitConnect &>(from));
}


void AUInitConnect::MergeFrom(const AUInitConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUInitConnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_worldid()) {
    _internal_set_worldid(from._internal_worldid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUInitConnect::CopyFrom(const AUInitConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUInitConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUInitConnect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUInitConnect::InternalSwap(AUInitConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUInitConnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[0]);
}

// ===================================================================

class UAConfirmConnected::_Internal {
 public:
  using HasBits = decltype(std::declval<UAConfirmConnected>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UAConfirmConnected::UAConfirmConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAConfirmConnected)
}
UAConfirmConnected::UAConfirmConnected(const UAConfirmConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(connected_));
  // @@protoc_insertion_point(copy_constructor:UAConfirmConnected)
}

inline void UAConfirmConnected::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worldid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(connected_));
}

UAConfirmConnected::~UAConfirmConnected() {
  // @@protoc_insertion_point(destructor:UAConfirmConnected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAConfirmConnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAConfirmConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAConfirmConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:UAConfirmConnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&worldid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connected_) -
        reinterpret_cast<char*>(&worldid_)) + sizeof(connected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAConfirmConnected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_connected(&has_bits);
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAConfirmConnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAConfirmConnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // required bool connected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_connected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAConfirmConnected)
  return target;
}

size_t UAConfirmConnected::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAConfirmConnected)
  size_t total_size = 0;

  if (_internal_has_worldid()) {
    // required int64 worldid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());
  }

  if (_internal_has_connected()) {
    // required bool connected = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UAConfirmConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAConfirmConnected)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 worldid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());

    // required bool connected = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAConfirmConnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAConfirmConnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAConfirmConnected::GetClassData() const { return &_class_data_; }

void UAConfirmConnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAConfirmConnected *>(to)->MergeFrom(
      static_cast<const UAConfirmConnected &>(from));
}


void UAConfirmConnected::MergeFrom(const UAConfirmConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAConfirmConnected)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      worldid_ = from.worldid_;
    }
    if (cached_has_bits & 0x00000002u) {
      connected_ = from.connected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAConfirmConnected::CopyFrom(const UAConfirmConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAConfirmConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAConfirmConnected::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UAConfirmConnected::InternalSwap(UAConfirmConnected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UAConfirmConnected, connected_)
      + sizeof(UAConfirmConnected::connected_)
      - PROTOBUF_FIELD_OFFSET(UAConfirmConnected, worldid_)>(
          reinterpret_cast<char*>(&worldid_),
          reinterpret_cast<char*>(&other->worldid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UAConfirmConnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[1]);
}

// ===================================================================

class AUInitPickUp::_Internal {
 public:
  using HasBits = decltype(std::declval<AUInitPickUp>()._has_bits_);
  static void set_has_whid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accountname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AUDeliveryLocation& deliverylocation(const AUInitPickUp* msg);
  static void set_has_deliverylocation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::AUDeliveryLocation&
AUInitPickUp::_Internal::deliverylocation(const AUInitPickUp* msg) {
  return *msg->deliverylocation_;
}
AUInitPickUp::AUInitPickUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  product_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUInitPickUp)
}
AUInitPickUp::AUInitPickUp(const AUInitPickUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      product_(from.product_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accountname()) {
    accountname_.Set(from._internal_accountname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_deliverylocation()) {
    deliverylocation_ = new ::AUDeliveryLocation(*from.deliverylocation_);
  } else {
    deliverylocation_ = nullptr;
  }
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&whid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(whid_));
  // @@protoc_insertion_point(copy_constructor:AUInitPickUp)
}

inline void AUInitPickUp::SharedCtor() {
accountname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  accountname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deliverylocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&whid_) -
    reinterpret_cast<char*>(&deliverylocation_)) + sizeof(whid_));
}

AUInitPickUp::~AUInitPickUp() {
  // @@protoc_insertion_point(destructor:AUInitPickUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUInitPickUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  accountname_.Destroy();
  if (this != internal_default_instance()) delete deliverylocation_;
}

void AUInitPickUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUInitPickUp::Clear() {
// @@protoc_insertion_point(message_clear_start:AUInitPickUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(deliverylocation_ != nullptr);
      deliverylocation_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(whid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUInitPickUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 whid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_whid(&has_bits);
          whid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string accountname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_accountname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AUInitPickUp.accountname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .AUDeliveryLocation deliverylocation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deliverylocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AUProduct product = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_product(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUInitPickUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUInitPickUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 whid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_whid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  // required string accountname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accountname().data(), static_cast<int>(this->_internal_accountname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AUInitPickUp.accountname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_accountname(), target);
  }

  // required .AUDeliveryLocation deliverylocation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::deliverylocation(this),
        _Internal::deliverylocation(this).GetCachedSize(), target, stream);
  }

  // repeated .AUProduct product = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_product_size()); i < n; i++) {
    const auto& repfield = this->_internal_product(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUInitPickUp)
  return target;
}

size_t AUInitPickUp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUInitPickUp)
  size_t total_size = 0;

  if (_internal_has_accountname()) {
    // required string accountname = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountname());
  }

  if (_internal_has_deliverylocation()) {
    // required .AUDeliveryLocation deliverylocation = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deliverylocation_);
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_whid()) {
    // required int32 whid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whid());
  }

  return total_size;
}
size_t AUInitPickUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUInitPickUp)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string accountname = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountname());

    // required .AUDeliveryLocation deliverylocation = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deliverylocation_);

    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 whid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AUProduct product = 5;
  total_size += 1UL * this->_internal_product_size();
  for (const auto& msg : this->product_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUInitPickUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUInitPickUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUInitPickUp::GetClassData() const { return &_class_data_; }

void AUInitPickUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUInitPickUp *>(to)->MergeFrom(
      static_cast<const AUInitPickUp &>(from));
}


void AUInitPickUp::MergeFrom(const AUInitPickUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUInitPickUp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  product_.MergeFrom(from.product_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_accountname(from._internal_accountname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_deliverylocation()->::AUDeliveryLocation::MergeFrom(from._internal_deliverylocation());
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      whid_ = from.whid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUInitPickUp::CopyFrom(const AUInitPickUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUInitPickUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUInitPickUp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(product_))
    return false;
  if (_internal_has_deliverylocation()) {
    if (!deliverylocation_->IsInitialized()) return false;
  }
  return true;
}

void AUInitPickUp::InternalSwap(AUInitPickUp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  product_.InternalSwap(&other->product_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &accountname_, lhs_arena,
      &other->accountname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUInitPickUp, whid_)
      + sizeof(AUInitPickUp::whid_)
      - PROTOBUF_FIELD_OFFSET(AUInitPickUp, deliverylocation_)>(
          reinterpret_cast<char*>(&deliverylocation_),
          reinterpret_cast<char*>(&other->deliverylocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUInitPickUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[2]);
}

// ===================================================================

class UATruckArrived::_Internal {
 public:
  using HasBits = decltype(std::declval<UATruckArrived>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UATruckArrived::UATruckArrived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UATruckArrived)
}
UATruckArrived::UATruckArrived(const UATruckArrived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:UATruckArrived)
}

inline void UATruckArrived::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(truckid_));
}

UATruckArrived::~UATruckArrived() {
  // @@protoc_insertion_point(destructor:UATruckArrived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UATruckArrived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UATruckArrived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UATruckArrived::Clear() {
// @@protoc_insertion_point(message_clear_start:UATruckArrived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UATruckArrived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 shipid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UATruckArrived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UATruckArrived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // required int64 shipid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_shipid(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UATruckArrived)
  return target;
}

size_t UATruckArrived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UATruckArrived)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  return total_size;
}
size_t UATruckArrived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UATruckArrived)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 shipid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UATruckArrived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UATruckArrived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UATruckArrived::GetClassData() const { return &_class_data_; }

void UATruckArrived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UATruckArrived *>(to)->MergeFrom(
      static_cast<const UATruckArrived &>(from));
}


void UATruckArrived::MergeFrom(const UATruckArrived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UATruckArrived)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UATruckArrived::CopyFrom(const UATruckArrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UATruckArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UATruckArrived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UATruckArrived::InternalSwap(UATruckArrived* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UATruckArrived, truckid_)
      + sizeof(UATruckArrived::truckid_)
      - PROTOBUF_FIELD_OFFSET(UATruckArrived, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UATruckArrived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[3]);
}

// ===================================================================

class AULoaded::_Internal {
 public:
  using HasBits = decltype(std::declval<AULoaded>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AULoaded::AULoaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AULoaded)
}
AULoaded::AULoaded(const AULoaded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AULoaded)
}

inline void AULoaded::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
}

AULoaded::~AULoaded() {
  // @@protoc_insertion_point(destructor:AULoaded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AULoaded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AULoaded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AULoaded::Clear() {
// @@protoc_insertion_point(message_clear_start:AULoaded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AULoaded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AULoaded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AULoaded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AULoaded)
  return target;
}

size_t AULoaded::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AULoaded)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t AULoaded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AULoaded)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 shipid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());

    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AULoaded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AULoaded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AULoaded::GetClassData() const { return &_class_data_; }

void AULoaded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AULoaded *>(to)->MergeFrom(
      static_cast<const AULoaded &>(from));
}


void AULoaded::MergeFrom(const AULoaded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AULoaded)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AULoaded::CopyFrom(const AULoaded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AULoaded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AULoaded::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AULoaded::InternalSwap(AULoaded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AULoaded, seqnum_)
      + sizeof(AULoaded::seqnum_)
      - PROTOBUF_FIELD_OFFSET(AULoaded, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AULoaded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[4]);
}

// ===================================================================

class UADelivered::_Internal {
 public:
  using HasBits = decltype(std::declval<UADelivered>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UADelivered::UADelivered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UADelivered)
}
UADelivered::UADelivered(const UADelivered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:UADelivered)
}

inline void UADelivered::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
}

UADelivered::~UADelivered() {
  // @@protoc_insertion_point(destructor:UADelivered)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UADelivered::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UADelivered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UADelivered::Clear() {
// @@protoc_insertion_point(message_clear_start:UADelivered)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UADelivered::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 packageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UADelivered::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UADelivered)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // required int64 packageid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_packageid(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UADelivered)
  return target;
}

size_t UADelivered::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UADelivered)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  return total_size;
}
size_t UADelivered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UADelivered)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 packageid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UADelivered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UADelivered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UADelivered::GetClassData() const { return &_class_data_; }

void UADelivered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UADelivered *>(to)->MergeFrom(
      static_cast<const UADelivered &>(from));
}


void UADelivered::MergeFrom(const UADelivered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UADelivered)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UADelivered::CopyFrom(const UADelivered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UADelivered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UADelivered::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UADelivered::InternalSwap(UADelivered* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UADelivered, truckid_)
      + sizeof(UADelivered::truckid_)
      - PROTOBUF_FIELD_OFFSET(UADelivered, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UADelivered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[5]);
}

// ===================================================================

class UADelievering::_Internal {
 public:
  using HasBits = decltype(std::declval<UADelievering>()._has_bits_);
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UADelievering::UADelievering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packageid_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UADelievering)
}
UADelievering::UADelievering(const UADelievering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      packageid_(from.packageid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seqnum_ = from.seqnum_;
  // @@protoc_insertion_point(copy_constructor:UADelievering)
}

inline void UADelievering::SharedCtor() {
seqnum_ = int64_t{0};
}

UADelievering::~UADelievering() {
  // @@protoc_insertion_point(destructor:UADelievering)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UADelievering::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UADelievering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UADelievering::Clear() {
// @@protoc_insertion_point(message_clear_start:UADelievering)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packageid_.Clear();
  seqnum_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UADelievering::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packageid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packageid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UADelievering::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UADelievering)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 packageid = 1;
  for (int i = 0, n = this->_internal_packageid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UADelievering)
  return target;
}

size_t UADelievering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UADelievering)
  size_t total_size = 0;

  // required int64 seqnum = 2;
  if (_internal_has_seqnum()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 packageid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->packageid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_packageid_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UADelievering::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UADelievering::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UADelievering::GetClassData() const { return &_class_data_; }

void UADelievering::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UADelievering *>(to)->MergeFrom(
      static_cast<const UADelievering &>(from));
}


void UADelievering::MergeFrom(const UADelievering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UADelievering)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packageid_.MergeFrom(from.packageid_);
  if (from._internal_has_seqnum()) {
    _internal_set_seqnum(from._internal_seqnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UADelievering::CopyFrom(const UADelievering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UADelievering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UADelievering::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UADelievering::InternalSwap(UADelievering* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packageid_.InternalSwap(&other->packageid_);
  swap(seqnum_, other->seqnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UADelievering::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[6]);
}

// ===================================================================

class UATruck::_Internal {
 public:
  using HasBits = decltype(std::declval<UATruck>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

UATruck::UATruck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UATruck)
}
UATruck::UATruck(const UATruck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  ::memcpy(&truckid_, &from.truckid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:UATruck)
}

inline void UATruck::SharedCtor() {
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&truckid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
}

UATruck::~UATruck() {
  // @@protoc_insertion_point(destructor:UATruck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UATruck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.Destroy();
}

void UATruck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UATruck::Clear() {
// @@protoc_insertion_point(message_clear_start:UATruck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&truckid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&truckid_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UATruck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 truckid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "UATruck.status");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UATruck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UATruck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_truckid(), target);
  }

  // required string status = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "UATruck.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // required int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // required int32 y = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // required int64 seqnum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UATruck)
  return target;
}

size_t UATruck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UATruck)
  size_t total_size = 0;

  if (_internal_has_status()) {
    // required string status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  if (_internal_has_x()) {
    // required int32 x = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_y()) {
    // required int32 y = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return total_size;
}
size_t UATruck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UATruck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());

    // required int32 truckid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

    // required int32 x = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());

    // required int64 seqnum = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 y = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UATruck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UATruck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UATruck::GetClassData() const { return &_class_data_; }

void UATruck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UATruck *>(to)->MergeFrom(
      static_cast<const UATruck &>(from));
}


void UATruck::MergeFrom(const UATruck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UATruck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UATruck::CopyFrom(const UATruck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UATruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UATruck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UATruck::InternalSwap(UATruck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UATruck, y_)
      + sizeof(UATruck::y_)
      - PROTOBUF_FIELD_OFFSET(UATruck, truckid_)>(
          reinterpret_cast<char*>(&truckid_),
          reinterpret_cast<char*>(&other->truckid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UATruck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[7]);
}

// ===================================================================

class AUProduct::_Internal {
 public:
  using HasBits = decltype(std::declval<AUProduct>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AUProduct::AUProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUProduct)
}
AUProduct::AUProduct(const AUProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:AUProduct)
}

inline void AUProduct::SharedCtor() {
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

AUProduct::~AUProduct() {
  // @@protoc_insertion_point(destructor:AUProduct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.Destroy();
}

void AUProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:AUProduct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&id_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUProduct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AUProduct.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUProduct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUProduct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AUProduct.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // required int32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUProduct)
  return target;
}

size_t AUProduct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUProduct)
  size_t total_size = 0;

  if (_internal_has_description()) {
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (_internal_has_id()) {
    // required int64 id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  if (_internal_has_count()) {
    // required int32 count = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t AUProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUProduct)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required int64 id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());

    // required int32 count = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUProduct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUProduct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUProduct::GetClassData() const { return &_class_data_; }

void AUProduct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUProduct *>(to)->MergeFrom(
      static_cast<const AUProduct &>(from));
}


void AUProduct::MergeFrom(const AUProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUProduct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUProduct::CopyFrom(const AUProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUProduct::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUProduct::InternalSwap(AUProduct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUProduct, count_)
      + sizeof(AUProduct::count_)
      - PROTOBUF_FIELD_OFFSET(AUProduct, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUProduct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[8]);
}

// ===================================================================

class UAPackageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UAPackageRequest>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UAPackageRequest::UAPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAPackageRequest)
}
UAPackageRequest::UAPackageRequest(const UAPackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UAPackageRequest)
}

inline void UAPackageRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
}

UAPackageRequest::~UAPackageRequest() {
  // @@protoc_insertion_point(destructor:UAPackageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAPackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAPackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UAPackageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAPackageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAPackageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAPackageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAPackageRequest)
  return target;
}

size_t UAPackageRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAPackageRequest)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UAPackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAPackageRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAPackageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAPackageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAPackageRequest::GetClassData() const { return &_class_data_; }

void UAPackageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAPackageRequest *>(to)->MergeFrom(
      static_cast<const UAPackageRequest &>(from));
}


void UAPackageRequest::MergeFrom(const UAPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAPackageRequest::CopyFrom(const UAPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAPackageRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UAPackageRequest::InternalSwap(UAPackageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UAPackageRequest, seqnum_)
      + sizeof(UAPackageRequest::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UAPackageRequest, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UAPackageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[9]);
}

// ===================================================================

class AUDeliveryLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<AUDeliveryLocation>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AUDeliveryLocation::AUDeliveryLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUDeliveryLocation)
}
AUDeliveryLocation::AUDeliveryLocation(const AUDeliveryLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:AUDeliveryLocation)
}

inline void AUDeliveryLocation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(y_));
}

AUDeliveryLocation::~AUDeliveryLocation() {
  // @@protoc_insertion_point(destructor:AUDeliveryLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUDeliveryLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUDeliveryLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUDeliveryLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:AUDeliveryLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUDeliveryLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUDeliveryLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUDeliveryLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUDeliveryLocation)
  return target;
}

size_t AUDeliveryLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUDeliveryLocation)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_x()) {
    // required int32 x = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return total_size;
}
size_t AUDeliveryLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUDeliveryLocation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int32 x = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());

    // required int32 y = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUDeliveryLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUDeliveryLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUDeliveryLocation::GetClassData() const { return &_class_data_; }

void AUDeliveryLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUDeliveryLocation *>(to)->MergeFrom(
      static_cast<const AUDeliveryLocation &>(from));
}


void AUDeliveryLocation::MergeFrom(const AUDeliveryLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUDeliveryLocation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUDeliveryLocation::CopyFrom(const AUDeliveryLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUDeliveryLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUDeliveryLocation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUDeliveryLocation::InternalSwap(AUDeliveryLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUDeliveryLocation, y_)
      + sizeof(AUDeliveryLocation::y_)
      - PROTOBUF_FIELD_OFFSET(AUDeliveryLocation, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUDeliveryLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[10]);
}

// ===================================================================

class AUPackageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AUPackageResponse>()._has_bits_);
  static const ::AUDeliveryLocation& deliverylocation(const AUPackageResponse* msg);
  static void set_has_deliverylocation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AUProduct& product(const AUPackageResponse* msg);
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::AUDeliveryLocation&
AUPackageResponse::_Internal::deliverylocation(const AUPackageResponse* msg) {
  return *msg->deliverylocation_;
}
const ::AUProduct&
AUPackageResponse::_Internal::product(const AUPackageResponse* msg) {
  return *msg->product_;
}
AUPackageResponse::AUPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUPackageResponse)
}
AUPackageResponse::AUPackageResponse(const AUPackageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deliverylocation()) {
    deliverylocation_ = new ::AUDeliveryLocation(*from.deliverylocation_);
  } else {
    deliverylocation_ = nullptr;
  }
  if (from._internal_has_product()) {
    product_ = new ::AUProduct(*from.product_);
  } else {
    product_ = nullptr;
  }
  seqnum_ = from.seqnum_;
  // @@protoc_insertion_point(copy_constructor:AUPackageResponse)
}

inline void AUPackageResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deliverylocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&deliverylocation_)) + sizeof(seqnum_));
}

AUPackageResponse::~AUPackageResponse() {
  // @@protoc_insertion_point(destructor:AUPackageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUPackageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete deliverylocation_;
  if (this != internal_default_instance()) delete product_;
}

void AUPackageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUPackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AUPackageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(deliverylocation_ != nullptr);
      deliverylocation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(product_ != nullptr);
      product_->Clear();
    }
  }
  seqnum_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUPackageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .AUDeliveryLocation deliverylocation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deliverylocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .AUProduct product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUPackageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUPackageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AUDeliveryLocation deliverylocation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::deliverylocation(this),
        _Internal::deliverylocation(this).GetCachedSize(), target, stream);
  }

  // required .AUProduct product = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::product(this),
        _Internal::product(this).GetCachedSize(), target, stream);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUPackageResponse)
  return target;
}

size_t AUPackageResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUPackageResponse)
  size_t total_size = 0;

  if (_internal_has_deliverylocation()) {
    // required .AUDeliveryLocation deliverylocation = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deliverylocation_);
  }

  if (_internal_has_product()) {
    // required .AUProduct product = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t AUPackageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUPackageResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AUDeliveryLocation deliverylocation = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deliverylocation_);

    // required .AUProduct product = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUPackageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUPackageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUPackageResponse::GetClassData() const { return &_class_data_; }

void AUPackageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUPackageResponse *>(to)->MergeFrom(
      static_cast<const AUPackageResponse &>(from));
}


void AUPackageResponse::MergeFrom(const AUPackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUPackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_deliverylocation()->::AUDeliveryLocation::MergeFrom(from._internal_deliverylocation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_product()->::AUProduct::MergeFrom(from._internal_product());
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUPackageResponse::CopyFrom(const AUPackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUPackageResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_deliverylocation()) {
    if (!deliverylocation_->IsInitialized()) return false;
  }
  if (_internal_has_product()) {
    if (!product_->IsInitialized()) return false;
  }
  return true;
}

void AUPackageResponse::InternalSwap(AUPackageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUPackageResponse, seqnum_)
      + sizeof(AUPackageResponse::seqnum_)
      - PROTOBUF_FIELD_OFFSET(AUPackageResponse, deliverylocation_)>(
          reinterpret_cast<char*>(&deliverylocation_),
          reinterpret_cast<char*>(&other->deliverylocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUPackageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[11]);
}

// ===================================================================

class AUCommands::_Internal {
 public:
};

AUCommands::AUCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pickupreq_(arena),
  loaded_(arena),
  acks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUCommands)
}
AUCommands::AUCommands(const AUCommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pickupreq_(from.pickupreq_),
      loaded_(from.loaded_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AUCommands)
}

inline void AUCommands::SharedCtor() {
}

AUCommands::~AUCommands() {
  // @@protoc_insertion_point(destructor:AUCommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUCommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUCommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:AUCommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pickupreq_.Clear();
  loaded_.Clear();
  acks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUCommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AUInitPickUp pickupreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pickupreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AULoaded loaded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loaded(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUCommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUCommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AUInitPickUp pickupreq = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pickupreq_size()); i < n; i++) {
    const auto& repfield = this->_internal_pickupreq(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AULoaded loaded = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_loaded_size()); i < n; i++) {
    const auto& repfield = this->_internal_loaded(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 3;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_acks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUCommands)
  return target;
}

size_t AUCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUCommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AUInitPickUp pickupreq = 1;
  total_size += 1UL * this->_internal_pickupreq_size();
  for (const auto& msg : this->pickupreq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AULoaded loaded = 2;
  total_size += 1UL * this->_internal_loaded_size();
  for (const auto& msg : this->loaded_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUCommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUCommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUCommands::GetClassData() const { return &_class_data_; }

void AUCommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUCommands *>(to)->MergeFrom(
      static_cast<const AUCommands &>(from));
}


void AUCommands::MergeFrom(const AUCommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUCommands)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pickupreq_.MergeFrom(from.pickupreq_);
  loaded_.MergeFrom(from.loaded_);
  acks_.MergeFrom(from.acks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUCommands::CopyFrom(const AUCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUCommands::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pickupreq_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(loaded_))
    return false;
  return true;
}

void AUCommands::InternalSwap(AUCommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pickupreq_.InternalSwap(&other->pickupreq_);
  loaded_.InternalSwap(&other->loaded_);
  acks_.InternalSwap(&other->acks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUCommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[12]);
}

// ===================================================================

class UACommands::_Internal {
 public:
};

UACommands::UACommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  truckarrived_(arena),
  delivered_(arena),
  trucks_(arena),
  acks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UACommands)
}
UACommands::UACommands(const UACommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      truckarrived_(from.truckarrived_),
      delivered_(from.delivered_),
      trucks_(from.trucks_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UACommands)
}

inline void UACommands::SharedCtor() {
}

UACommands::~UACommands() {
  // @@protoc_insertion_point(destructor:UACommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UACommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UACommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UACommands::Clear() {
// @@protoc_insertion_point(message_clear_start:UACommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  truckarrived_.Clear();
  delivered_.Clear();
  trucks_.Clear();
  acks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UACommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UATruckArrived truckarrived = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_truckarrived(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UADelivered delivered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delivered(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UATruck trucks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trucks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UACommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UACommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UATruckArrived truckarrived = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_truckarrived_size()); i < n; i++) {
    const auto& repfield = this->_internal_truckarrived(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UADelivered delivered = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delivered_size()); i < n; i++) {
    const auto& repfield = this->_internal_delivered(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UATruck trucks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trucks_size()); i < n; i++) {
    const auto& repfield = this->_internal_trucks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 4;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_acks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UACommands)
  return target;
}

size_t UACommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UACommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UATruckArrived truckarrived = 1;
  total_size += 1UL * this->_internal_truckarrived_size();
  for (const auto& msg : this->truckarrived_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UADelivered delivered = 2;
  total_size += 1UL * this->_internal_delivered_size();
  for (const auto& msg : this->delivered_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UATruck trucks = 3;
  total_size += 1UL * this->_internal_trucks_size();
  for (const auto& msg : this->trucks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UACommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UACommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UACommands::GetClassData() const { return &_class_data_; }

void UACommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UACommands *>(to)->MergeFrom(
      static_cast<const UACommands &>(from));
}


void UACommands::MergeFrom(const UACommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UACommands)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  truckarrived_.MergeFrom(from.truckarrived_);
  delivered_.MergeFrom(from.delivered_);
  trucks_.MergeFrom(from.trucks_);
  acks_.MergeFrom(from.acks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UACommands::CopyFrom(const UACommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UACommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UACommands::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(truckarrived_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delivered_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(trucks_))
    return false;
  return true;
}

void UACommands::InternalSwap(UACommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  truckarrived_.InternalSwap(&other->truckarrived_);
  delivered_.InternalSwap(&other->delivered_);
  trucks_.InternalSwap(&other->trucks_);
  acks_.InternalSwap(&other->acks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UACommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_2damazon_2eproto_getter, &descriptor_table_ups_2damazon_2eproto_once,
      file_level_metadata_ups_2damazon_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AUInitConnect*
Arena::CreateMaybeMessage< ::AUInitConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUInitConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::UAConfirmConnected*
Arena::CreateMaybeMessage< ::UAConfirmConnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAConfirmConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::AUInitPickUp*
Arena::CreateMaybeMessage< ::AUInitPickUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUInitPickUp >(arena);
}
template<> PROTOBUF_NOINLINE ::UATruckArrived*
Arena::CreateMaybeMessage< ::UATruckArrived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UATruckArrived >(arena);
}
template<> PROTOBUF_NOINLINE ::AULoaded*
Arena::CreateMaybeMessage< ::AULoaded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AULoaded >(arena);
}
template<> PROTOBUF_NOINLINE ::UADelivered*
Arena::CreateMaybeMessage< ::UADelivered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UADelivered >(arena);
}
template<> PROTOBUF_NOINLINE ::UADelievering*
Arena::CreateMaybeMessage< ::UADelievering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UADelievering >(arena);
}
template<> PROTOBUF_NOINLINE ::UATruck*
Arena::CreateMaybeMessage< ::UATruck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UATruck >(arena);
}
template<> PROTOBUF_NOINLINE ::AUProduct*
Arena::CreateMaybeMessage< ::AUProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::UAPackageRequest*
Arena::CreateMaybeMessage< ::UAPackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAPackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AUDeliveryLocation*
Arena::CreateMaybeMessage< ::AUDeliveryLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUDeliveryLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::AUPackageResponse*
Arena::CreateMaybeMessage< ::AUPackageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUPackageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AUCommands*
Arena::CreateMaybeMessage< ::AUCommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUCommands >(arena);
}
template<> PROTOBUF_NOINLINE ::UACommands*
Arena::CreateMaybeMessage< ::UACommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UACommands >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
